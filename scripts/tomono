#!/usr/bin/perl
use strict;
use Time::Local;
use IO::File;

# =========================================================================
# =========================== Description =================================
# =========================================================================

# tomono

# Script to convert files from various formats into mono internal format.
# Also has functionality to merge several mono files, and remove duplicated
# edits.

# Invoke with:
#   tomono [-m|-n] filename1 filename2
# Result is put to stdout, errors may appear on stderr

# Input file formats are:
# email format
# mono format
# golem output format (ansi attributes)

# NOTE: it doesn't actually try to work out what format the input is in - it
# just looks for special cases (such as a line beginning Message:) and
# converts them into the correct format.  This will not always work, but is
# very likely to for at all reasonable data.

# If more than one filename is given, the file will be parsed into edits,
# which will then be (stably) sorted into chronological order, and identical
# (character for character, 'trib for 'trib') edits uniqified, and then
# output.
# This behaviour can be suppressed by use of -n, in which case output will
# simply be parsed lines in the same order as they appear in the input files,
# with files concatenated together.

# If only one filename is given, the behaviour will default to line by line
# conversion, (as if -n was specified), but this can be modified to sort edits
# by date by specifying -m (for merge).

# See also: 
#   monotoansi - convert the other way.
#   mless - use less and monotoansi to view mono format files.

# BUGS
# Not sure if it parses files generated from mono format files which have
# empty Message: lines correctly.

# Not extensively enough tested - please tell me if you use this and it works,
# so I can eventually remove this line. :)

# =========================================================================
# =========================== Constants ===================================
# =========================================================================

my %months = (
  'Jan' => 1,
  'Feb' => 2,
  'Mar' => 3,
  'Apr' => 4,
  'May' => 5,
  'Jun' => 6,
  'Jul' => 7,
  'Aug' => 8,
  'Sep' => 9,
  'Oct' => 10,
  'Nov' => 11,
  'Dec' => 12,
);

# =========================================================================
# ==================== Start of program ===================================
# =========================================================================

my $my_name = $0;
$my_name =~ s#^.*/##;
my $opt_error = 0;
my $opt_merge = -1;	# Merge edits in the file together - can result in 
			# re-ordering edits.

while($ARGV[0] =~ /^-/) {
    my $opt = shift();
    if($opt =~ /^-m$/) {
	$opt_merge = 1;
    } elsif($opt =~ /^-n$/) {
	$opt_merge = 0;
    } elsif($opt =~ /^-h$/) {
	$opt_error = 2;
	warn "Read the code for help ... try the command \"less $0\"\n";
    } else {
	$opt_error = 1;
	warn "Unknown option $opt\n";
    }
}

die "Syntax $my_name [-m|-n|-h] inputfile(s)\n" if $opt_error;

# Do default merging behaviour if not overridden.
$opt_merge = ($#ARGV > 0) if $opt_merge == -1;

my %edits = ();
my $editsref = undef;
$editsref = \%edits if($opt_merge);

if($#ARGV >= 0) {
    my $file_in;
    while(defined($file_in = shift())) {
	readfile($file_in, $editsref);
    }
} else {
    readfile(undef, $editsref);
}

my $key;
foreach $key (sort(keys(%edits))) {
    print @{$edits{$key}};
}

exit(0);
# =========================================================================
# ====================== End of program ===================================
# =========================================================================

sub readfile($$) {
  my $filename = shift();
  my $editshashref = shift();

  my $filehandle = new IO::File;

  if(defined($filename)) {
      unless($filehandle->open($filename, "r")) {
          warn "Can't access input file \"$filename\" ($!)\n";
	  return;
      }
  } else {
      unless($filehandle->fdopen(fileno(STDIN), "r")) {
          warn "Can't access standard input ($!)\n";
	  return;
      }
  }

  my $edit  = "";
  my $timestamp = 0;

  my $line;
  while(defined($line = $filehandle->getline)) {
    # Sort out weird characters, and convert 's to 's
    $line =~ s/\007|\035/\033/g;
  
    if($line =~ /^\e\[;1;7;44m-{51}\[\e\[;7;44m(.{24})\e\[;1;7;44m\]--\e\[m\n$/)
    { # ANSI style message line (golem would return this.)

      # Add previous edit
      addedit($editshashref, \$edit, $timestamp) if($edit ne "");
  
      $edit = "";
      $timestamp = unixtime($1);
      $line = sprintf("Message: %-8lX                       ($1)\n",$timestamp);
    } elsif($line =~ /^\e\[;1;7;44m-{79}\e\[m\n$/)
    { # ANSI style empty message line (golem would return this.)

      # Add previous edit
      addedit($editshashref, \$edit, $timestamp) if($edit ne "");
  
      $edit = "";
      # Keep old timestamp, so we're tied to the previous edit.
      $line = "Message: 00000000\n";
    } elsif($line =~ /^Message:(. *)([0-9A-Fa-f]{0,8})/)
    { # Mono style message line (either a directly copied file, or a
      # converted file).

      # Add previous edit
      addedit($editshashref, \$edit, $timestamp) if($edit ne "");
  
      $edit = "";
      if(hex($2)) {
        $timestamp = hex($2);
      } else {
        # If hex($2) == 0 we keep the timestamp of the previous edit.
      }
      # $line is already correct
    } elsif($line =~ /^-{51}\[(.{24})\]--$/)
    { # Email style message line

      # Add previous edit
      addedit($editshashref, \$edit, $timestamp) if($edit ne "");
  
      $edit = "";
      $timestamp = unixtime($1);
      $line = sprintf("Message: %-8lX                       ($1)\n",$timestamp);
    } elsif($line =~ /^-{79}$/)
    { # Email style empty message line

      # Add previous edit
      addedit($editshashref, \$edit, $timestamp) if($edit ne "");
  
      $edit = "";
      # Keep old timestamp
      $line = "Message: 00000000\n";
    } elsif($line =~ /^From:( *)\e\[;1;32m(.*?)( *)\((.{0,8}(?::\d+|))\)\e\[m\n$/) {
      $line = "From:$1$2$3($4)\n";
    } elsif($line =~ /^Subject:( *)\e\[;4;36m(.*)\e\[m\n$/) {
      # ANSI Subject line
      $line = "Subject:$1$2\n";
    } elsif($line =~ /^To:( *)\eCG(.*)\n$/) {
      # Badly converted (tribbed) To line
      $line = "To:$1$2\n";
    } elsif($line =~ /^To:( *)\e\[;32m(.*)\e\[m\n$/) {
      $line = "To:$1$2\n";
    }
    $line = ansi2monoline($line);

    $edit .= $line;
  }
  # Add final edit
  addedit($editshashref, \$edit, $timestamp) if($edit ne "");
}

sub addedit($$$) {
    my $editshashref = shift();
    my $editref = shift();
    my $timestamp = shift();

    if(ref($editshashref) eq "HASH") {
	my $editsref = $editshashref->{$timestamp};
	my $edit;
	my $duplicate = 0;
	foreach $edit (@$editsref) {
	    $duplicate = 1 if $edit eq $$editref;
	}
	push @$editsref, $$editref unless $duplicate;
	$editshashref->{$timestamp} = $editsref;
    } else {
	print $$editref;
    }
}

# Take a monochrome text timestamp, and return the time in seconds.
# Returns an 8 hex digit number (capital letters used) representing the time
# passed.  Time passed is in format "WWW MMM DD HH:MM:SS YYYY".
sub unixtime($) {

  my $texttime = shift;
  warn "Invalid date ($texttime)\n" unless
    $texttime =~ /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) # Weekdays
		   \ 				 # Space
		   (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) # Month
		   \ 				 # Space
		   ([ 123][0-9])		 # Day of month
		   \ 				 # Space
		   ([01][0-9]|2[0-3])		 # Hour
		   :				 # Colon
		   ([0-5][0-9])			 # Minute
		   :				 # Colon
		   ([0-5][0-9])			 # Second
		   \ 				 # Space
		   ([12][0-9]{3})		 # Year
                 $/x;
  return timegm($6, $5, $4, $3 + 0, $months{$2} - 1, $7);
}

# Convert a line from ansi attribute format to mono attribute format
# Can be applied to a line already in attribute format and shouldn't change
# it.
sub ansi2monoline($) {
  my $line = shift();
  my %state = ();
  
  $line =~ s/\e\[m\n$/\n/;

  while($line =~ /\e\[(.*?)m/) {
    my $ansi = $1;
    my $pre = $`;
    my $post = $';
    $ansi .= ";" if($ansi !~ /;$/);
    
    my $mono = '';
    my %oldstate = %state;
    while($ansi =~ s/^(.*?);//) {
      my $trib = $1;
      if($trib == 0) {
        %state = ();
      } elsif($trib == 1) {
        $state{"BOLD"} = 1;
      } elsif($trib == 2) {
        $state{"DIM"} = 1;
      } elsif($trib == 4) {
        $state{"UL"} = 1;
      } elsif($trib == 5) {
        $state{"BLINK"} = 1;
      } elsif($trib == 7) {
        $state{"REV"} = 1;
      } elsif($trib == 21) {
        $state{"BOLD"} = 0;
        $state{"DIM"} = 0;
      } elsif($trib == 22) {
        $state{"BOLD"} = 0;
        $state{"DIM"} = 0;
      } elsif($trib == 24) {
        $state{"UL"} = 0;
      } elsif($trib == 25) {
        $state{"BLINK"} = 0;
      } elsif($trib == 27) {
        $state{"REV"} = 0;
      } elsif($trib >= 30 && $trib <= 37) {
        $state{"FG"} = $trib - 30;
      } elsif($trib >= 40 && $trib <= 47) {
        $state{"BG"} = $trib - 40;
      } else {
        warn "Unknown 'trib '$trib'\n";
      }
    }

    if($state{"BOLD"} != $oldstate{"BOLD"}) {
      if($state{"BOLD"}) { $mono .= "\eB"; } else { $mono .= "\eb"; }
    }
    if($state{"DIM"} != $oldstate{"DIM"}) {
      if($state{"DIM"}) { $mono .= "\eD"; } else { $mono .= "\ed"; }
    }
    if($state{"BLINK"} != $oldstate{"BLINK"}) {
      if($state{"BLINK"}) { $mono .= "\eF"; } else { $mono .= "\ef"; }
    }
    if($state{"UL"} != $oldstate{"UL"}) {
      if($state{"UL"}) { $mono .= "\eU"; } else { $mono .= "\eu"; }
    }
    if($state{"REV"} != $oldstate{"REV"}) {
      if($state{"REV"}) { $mono .= "\eR"; } else { $mono .= "\er"; }
    }
    if($state{"FG"} != $oldstate{"FG"}) {
      $mono .= "\eC" . ansi2monocolour($state{"FG"});
    }
    if($state{"BG"} != $oldstate{"BG"}) {
      $mono .= "\eC" . lc(ansi2monocolour($state{"BG"}));
    }

    $line = $pre . $mono . $post;
  }
  return $line;
}

# Return the attribute letter associated with an ansi colour.
sub ansi2monocolour($) {
  my $ansi = shift();
  if(!defined($ansi)) { return 'A'; }
  if($ansi == 0) { return 'K'; }
  elsif($ansi == 1) { return 'R'; }
  elsif($ansi == 2) { return 'G'; }
  elsif($ansi == 3) { return 'Y'; }
  elsif($ansi == 4) { return 'B'; }
  elsif($ansi == 5) { return 'M'; }
  elsif($ansi == 6) { return 'C'; }
  elsif($ansi == 7) { return 'W'; }
}
