Summary: Support for "zlib@openssh.com"
Class: wish
Difficulty: tricky
Priority: medium
Fixed-in: r9120 2011-03-05
Content-type: text/x-html-body

<p>
OpenSSH 4.2 introduces a variety of ZLIB compression called "zlib@openssh.com"
which delays starting compression until after the server has sent
SSH_MSG_USERAUTH_ACCEPT.  It's configured to use only this by default (or
with the "Compression delayed" option in sshd_config), which means that
PuTTY cannot negotiate compression; ordinary "zlib" compression can be
reinstated with "Compression yes".

<p>
The new method is specified in
<a href="http://tools.ietf.org/html/draft-miller-secsh-compression-delayed">draft-miller-secsh-compression-delayed</a>, currently -00.

<p>
As far as we can tell, this is inherently subject
to a race condition, since the client can't know whether the server has sent
that message, and hence whether it should be transmitting compressed or
uncompressed packets.  After the client has received USERAUTH_ACCEPT, of
course, it knows that the server has sent it and can safely send compressed
packets.  This suggests that the following implementation would be safe
(assuming throughout that the user has requested compression):

<ol>
<li>Before USERAUTH_ACCEPT is received, advertise "zlib,none" in KEXINIT.</li>
<li>If an incoming KEXINIT includes "zlib@openssh.com", remember that.</li>
<li>After receiving USERAUTH_ACCEPT, if the current compression algorithm is
"none" and KEXINIT contained "zlib@openssh.com", initiate key re-exchange.</li>
<li>In KEXINITs after receiving USERAUTH_ACCEPT, advertise
"zlib,zlib@openssh.com,none".</li>
</ol>

<p>
There's no need for PuTTY to stop supporting "zlib", since by the time we
send NEWKEYS, we've authenticated the server.

<p>
<em>Update, 2011-03-05:</em> this is now supported, using the method
described above.
