\cfg{man-identity}{ick-proxy}{1}{2005-02-18}{Simon Tatham}{Simon Tatham}

\title Man page for \cw{ick-proxy}

\U NAME

\cw{ick-proxy} - Javascript-configurable web proxy returning 302s only

\U SYNOPSIS

\c ick-proxy [ -p port ] [ -c config-file ] [ subcommand ]
\e bbbbbbbbb   bb iiii     bb iiiiiiiiiii     iiiiiiiiii
\c ick-proxy -t test-url
\e bbbbbbbbb bb iiiiiiii

\U DESCRIPTION

\cw{ick-proxy} is a specialist web proxy whose job is to rewrite
URLs and return 302 (Moved Temporarily) redirections for them.

You might use \cw{ick-proxy} if there was a class of URL which you
frequently needed to click on links to, but which you preferred to
append additional text to. An example might be a blog site such as
LiveJournal, in which pages can be viewed in different styles by
appending text to the URL of the form \cw{?style=xxxx}: you might
have a preferred style in which to read such pages, but be unable to
arrange that all links to the pages carried your style marker.
\cw{ick-proxy} would solve this for you, by rewriting the URL after
you click on the link.

\U CONFIGURATION

To configure \cw{ick-proxy}, you provide a piece of JavaScript which
implements a function called \cw{RewriteURL} (one string argument,
string return value). You must then arrange for your web browser to
use \cw{ick-proxy} as a web proxy, but \e{only} for precisely those
URLs which require rewriting. Since \cw{ick-proxy} has no capability
to actually fetch web pages, if you ask it for a URL which does not
require rewriting it will have no option but to return a 501
internal error code.

The reason why the \cw{ick-proxy} configuration is written in
JavaScript is to make it easy to reuse as proxy configuration. Most
major web browsers can be configured to use a \c{.pac} file to
choose what proxy to use for a given URL; this is a piece of
JavaScript which implements a function called \cw{FindProxyForURL}.
So you can use the \e{same} configuration file for both
\cw{ick-proxy} itself and your browser, by writing it in this form:

\c function RewriteURL(url)
\c {
\c     /* do the actual rewriting */
\c }
\c
\c function FindProxyForURL(url, host)
\c {
\c     if (RewriteURL(url) != url)
\c         return "PROXY localhost:45678";
\c     return "DIRECT"; /* or whatever your normal proxy setup requires */
\c }

\cw{ick-proxy} can use this file as its configuration; it will
ignore the \cw{FindProxyForURL} function completely, and call
\cw{RewriteURL} directly. Your web browser can use the same file, and
\cw{FindProxyForURL} will direct it to \cw{ick-proxy} if and only if
it is necessary. If you need to change your URL rewriting
configuration, you can do so exactly once and both halves of the
mechanism will adapt.

\U INVOCATION

\cw{ick-proxy} can be run in various different modes.

To run it as a simple daemon listening on a provided port number,
just provide the port number using the \cw{-p} option:

\c ick-proxy -c ick-config.js -p 18768
\e bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

Alternatively, since it contains what is really per-user
configuration, you might not want to run it as a permanent daemon on
your system. Instead, you might (for example) choose to run it only
for the duration of your X session, and instruct it to choose a free
port number for each session rather than assigning it a fixed one.
You can do this by supplying a subcommand on the command line:

\c ick-proxy -c ick-config.js sh
\e bbbbbbbbbbbbbbbbbbbbbbbbbbbbb

This invocation will cause \cw{ick-proxy} to begin listening on an
arbitrarily chosen TCP port, and then to run \c{sh} as a subprocess
and pass it the port number in the environment variable
\cw{$ICK_PROXY}. When the subprocess terminates, \cw{ick-proxy} will
shut down as well.

A typical way to use this might be to replace the last line of your
\cw{.xsession} file (which probably runs a window manager or session
manager of some kind, such as \c{gnome-session}) with something like
this:

\c ick-proxy -c ick-config.js \
\e bbbbbbbbbbbbbbbbbbbbbbbbbbbb
\c    sh -c 'make-proxy-config.sh; exec gnome-session'
\e    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

If you request the proxy port number be freshly allocated every time
you run a new session, you cannot have a static \c{.pac} file which
contains it, so the \cw{ick-proxy} subprocess must start by running
a script which constructs a \c{.pac} file containing the port number
given in \cw{$ICK_PROXY}.

(Yes, this is a lot of fiddly hassle. There's a reason why the
program has \q{ick} in its name. You can't say you weren't warned.)

Alternatively, you can use \c{-p} \e{and} a subcommand (so that your
\cw{.pac} file can be static again). Finally, you can use neither
\c{-p} nor a subcommand, which means that \cw{ick-proxy} will pick a
random port and then fork off to run as a permanent daemon. To
prevent this from being entirely useless, it will output its port
number on standard output before forking, in the form of an \c{sh}
variable assignment (e.g. \cq{ICK_PROXY=46984}). So you could use
this mechanism by writing, for example,

\c eval `ick-proxy -c ick-config.js`
\e bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
\c # now rebuild your .pac file given $ICK_PROXY

\U OPTIONS

\dt \cw{-p} \e{port}

\dd Specify a fixed port on which \cw{ick-proxy} will listen. When
no subcommand is provided, this option inhibits \cw{ick-proxy} from
outputting its chosen port number before forking. When a subcommand
is provided, however, it does \e{not} prevent \cw{ick-proxy} from
setting the environment variable \cw{$ICK_PROXY} in its subprocess.

\dt \cw{-c} \e{config}

\dd Specify the location of the JavaScript configuration file.

\dt \cw{--debug}

\dd Causes \cw{ick-proxy} to output debugging information about the
connections it handles. The debugging data will be output to file
descriptor 3, so if you use this option you must ensure that that
file descriptor points somewhere useful.

\dt \cw{-t} \e{url}

\dd Causes \cw{ick-proxy} not to start up as a daemon at all.
Instead, it will load its configuration file, pass the provided URL
to the \cw{RewriteURL} function, output the result on standard
output, and then terminate. Use this feature for testing your
configuration before starting up \cw{ick-proxy} for real.

\U BUGS

This man page is hopelessly out of date; ick-proxy is now not
configured in Javascript, but in a language of my own design which I
haven't yet got round to documenting. Sorry.

\U LICENCE

\cw{ick-proxy} is free software, distributed under the MIT licence.
Type \cw{ick-proxy --licence} to see the full licence text.

\versionid $Id$
