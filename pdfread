#!/usr/bin/env python

import sys
import string
import re
import types
import zlib

diagnostic_errors = 0

pdfwhitespace = "\000\011\012\014\015\040"
pdfdelimiter = "()[]{}<>/%"
pdfregular = ""
for i in range(256):
    c = chr(i)
    if not (c in pdfwhitespace or c in pdfdelimiter):
        pdfregular = pdfregular + c

def fassert(s, err):
    if not s:
        sys.stderr.write(err + "\n")
        if diagnostic_errors:
            raise "ooh"
        else:
            sys.exit(1)

def pdflex(s, list):
    while 1:
        # Eat whitespace.
        sl = len(s)
        while len(s) > 0 and s[0] in pdfwhitespace:
            s = s[1:]
        if len(s) == 0:
            break
        if s[0] in string.digits:
            n = 0
            while len(s) > n and s[n] in string.digits + ".":
                n = n + 1
            if len(s) > n:
                list.append(s[:n])
                s = s[n:]
        elif s[0] in pdfregular or s[0] == "/":
            n = (s[0] == "/")
            while len(s) > n and s[n] in pdfregular:
                n = n + 1
            if len(s) > n:
                list.append(s[:n])
                s = s[n:]
                if list[-1] == "stream" or list[-1] == "endobj" or list[-1] == "startxref":
                    break
        elif s[0] == "[" or s[0] == "]":
            list.append(s[0])
            s = s[1:]
        elif len(s) >= 2 and s[0] == "<" and s[1] != "<":
            # Single angle brackets delimit a hex string.
            ci = string.find(s, ">")
            if ci > 0:
                list.append(s[:ci+1])
                s = s[ci+1:]
        elif s[0] == "<" or s[0] == ">":
            fassert(len(s) < 2 or s[1] == s[0], "unexpected lone angle bracket in file")
            if len(s) >= 2:
                list.append(s[:2])
                s = s[2:]
        elif s[0] == "(":
            n = 1
            d = 1
            while len(s) > n and d > 0:
                if s[n] == "(":
                    d = d + 1
                if s[n] == ")":
                    d = d - 1
                if s[n] == "\\":
                    n = n + 1
                n = n + 1
            if d == 0:
                list.append(s[:n])
                s = s[n:]
        elif s[0] == "%":
            ri = string.find(s, "\r")
            ni = string.find(s, "\n")
            if ri < 0: ri = len(s)
            if ni < 0: ni = len(s)
            mi = min(ri, ni)
            if ri+ni == mi*2+1:
                ei = mi+2
            else:
                ei = mi+1
            s = s[ei:]
    return s

def numeric(s):
    ss = string.translate(s, " " * 256, string.digits)
    return len(s) > 0 and len(ss) == 0

def pdfobj(list):
    fassert(len(list) > 0, "unexpected end of data")
    if list[0] == "[":
        del list[0]
        ret = []
        while 1:
            fassert(len(list) > 0, "unexpected end of data in array")
            if list[0] == "]":
                del list[0]
                break
            ret.append(pdfobj(list))
        return ret
    elif list[0] == "<<":
        del list[0]
        ret = {}
        while 1:
            fassert(len(list) > 0, "unexpected end of data in dictionary")
            if list[0] == ">>":
                del list[0]
                break
            fassert(len(list) > 1, "unexpected end of data in dictionary")
            key = list[0]
            del list[0]
            val = pdfobj(list)
            ret[key] = val
        return ret
    elif len(list) >= 3 and numeric(list[0]) and numeric(list[1]) and \
    list[2] == "R":
        ret = (string.atoi(list[0]), string.atoi(list[1]))
        del list[0:3]
        return ret
    else:
        ret = list[0]
        del list[0]
        return ret

def pdfparse(list):
    list = list[:] # copy the list
    parsed = []
    while len(list) > 0:
        parsed.append(pdfobj(list))
    return parsed

def pdfgetline(f, chomp=0):
    s = ""
    while 1:
        ss = f.read(64)
        if ss == "":
            return "" # even if chomp
        ri = string.find(ss, "\r")
        ni = string.find(ss, "\n")
        if ri < 0: ri = len(ss)
        if ni < 0: ni = len(ss)
        mi = min(ri, ni)
        s = s + ss[:mi]
        if mi < len(ss):
            f.seek(mi-len(ss), 1)
            c1 = f.read(1)
            assert c1 == "\r" or c1 == "\n"
            if c1 == "\r":
                c2 = f.read(1)
                if c2 != "\n" and c2 != "":
                    f.seek(-1, 1)
            break
    if not chomp:
        s = s + "\n"
    return s

def fetchobj(f, xoff, number, gen, printout=0):
    offset = None
    xrefoff = xoff
    while 1:
        f.seek(xrefoff)
        s = pdfgetline(f, 1)
        fassert(s == "xref", "expected 'xref' keyword in xref section")
        while 1:
            s = pdfgetline(f, 1)
            ss = string.split(s)
            if len(ss) != 2:
                break
            start = string.atoi(ss[0])
            nobjs = string.atoi(ss[1])
            curroff = f.tell()
            if number >= start and number < start + nobjs:
                # Found it.
                f.seek((number - start) * 20, 1)
                entry = f.read(20)
                entryl = string.split(entry)
                gennum = string.atoi(entryl[1])
                if gen < 0 or gen == gennum:
                    offset = string.atoi(entryl[0])
            # Seek to the end of this bit and try the next bit.
            f.seek(curroff + nobjs * 20)
        # Now parse the following trailer.
        lexed = []
        d = ""
        while 1:
            s = pdfgetline(f, 0)
            if s == "": break
            d = d + s
            d = pdflex(d, lexed)
            if len(lexed) > 0 and lexed[-1] == "startxref":
                break
        parsed = pdfparse(lexed)
        if number == -1:
            return parsed
        fassert(type(parsed[0]) == types.DictType, "expected dictionary in trailer")
        # Now look backwards to find the previous xref section.
        prevstr = parsed[0].get("/Prev", "")
        if prevstr == "":
            break
        xrefoff = string.atoi(prevstr)

    if offset == None:
        objstr = "%d" % number
        if gen >= 0:
            objstr = objstr + " %d" % gen
        sys.stderr.write("unable to find object number %s\n" % objstr)
        sys.exit(1)

    # Now we know the object offset. Read and display the object.
    f.seek(offset)
    d = ""
    lexed = []
    donestream = 0
    while 1:
        s = pdfgetline(f, 0)
        if s == "": break
        d = d + s
        dn = pdflex(d, lexed)
        if printout: sys.stdout.write(d[:len(d)-len(dn)])
        d = dn
        if lexed[-1] == "stream" and not donestream:
            donestream = 1
            if printout: sys.stdout.write("\n")
            parsed = pdfparse(lexed)
            assert parsed[-1] == "stream"
            fassert(type(parsed[-2]) == types.DictType, "expected dictionary before 'stream'")
            streamlen = parsed[-2]["/Length"]
            if type(streamlen) == types.TupleType:
                offset = f.tell()
                otherparsed = fetchobj(f, xoff, streamlen[0], streamlen[1])
                streamlen = otherparsed[3]
                f.seek(offset)
            streamlen = string.atoi(streamlen)
            streamdata = f.read(streamlen)
            filt = parsed[-2].get("/Filter", "")
            if filt == "/FlateDecode":
                streamdata = zlib.decompress(streamdata)
            elif filt == "":
                pass
            else:
                raise "filter type %s not supported" % str(filt)
            # It will really help if we translate line endings now.
            streamdata = re.sub("\r\n?", "\n", streamdata)
            if printout: sys.stdout.write(streamdata)
        if lexed[-1] == "endobj":
            if printout: sys.stdout.write("\n")
            break
    parsed = pdfparse(lexed)
    return parsed

args = sys.argv[1:]
if len(args) == 0:
    print "usage: pdfread <filename>"
    print "   or: pdfread <filename> <objnum>"
    print "   or: pdfread <filename> <objnum> <gennum>"
    print "   or: pdfread <filename> -p <pagenum>"
    sys.exit(0)

if args[0] == "-d":
    args = args[1:]
    diagnostic_errors = 1

filename = args[0]
args = args[1:]

number = -1 # indicates we're starting from the root object
gen = -1 # indicates we want the latest generation
mode = "obj" # indicates we're in object-fetching mode, unless we later are
page = None

if len(args) > 0:
    if args[0] == "-p" and len(args) > 1:
        page = string.atoi(args[1])
	mode = "page" # indicates we're in page-fetching mode
        args = args[2:]
    elif args[0] == "-pc":
        mode = "pagecount" # indicates we're in page-counting mode
        args = args[1:]
    else:
        number = string.atoi(args[0])
        args = args[1:]
        if len(args) > 0:
            gen = string.atoi(args[0])

f = open(filename, "rb")

f.seek(0, 2) # go to end of file
flen = f.tell()

# This is ad-hockery. If it ever lets me down I'll have to do better.
trailsize = 512
if trailsize > flen: trailsize = flen
f.seek(-trailsize, 2)
trailer = f.read(trailsize)

linelist = []

while len(trailer) > 0:
    ri = string.find(trailer, "\r")
    ni = string.find(trailer, "\n")
    if ri < 0: ri = len(trailer)
    if ni < 0: ni = len(trailer)
    mi = min(ri, ni)
    if ri+ni == mi*2+1:
        ei = mi+2
    else:
        ei = mi+1
    line = trailer[0:mi]
    trailer = trailer[ei:]
    linelist.append(line)

# Parse to find the (first) xref section offset.
if len(linelist)<=3 or linelist[-3]!="startxref" or linelist[-1]!="%%EOF":
    sys.stderr.write("unable to find xref section offset\n")
    sys.exit(1)
xrefoff = string.atoi(linelist[-2])

if number < 0:
    trailer = fetchobj(f, xrefoff, -1, -1)
    fassert(type(trailer[0]) == types.DictType, "expected dictionary in trailer")
    number, gen = trailer[0]["/Root"]

if mode == "page":
    page = page - 1 # PDF pages are traditionally numbered from one
    # Look down the /Pages tree for a particular page number.
    catalog = fetchobj(f, xrefoff, number, gen)
    fassert(type(catalog[3]) == types.DictType, "expected dictionary in Catalog object")
    pagekids = [catalog[3]["/Pages"]]
    while 1:
        obj = None
        for i in pagekids:
            pages = fetchobj(f, xrefoff, i[0], i[1])
            fassert(type(pages[3]) == types.DictType, "expected dictionary in Pages/Page object")
            if pages[3]["/Type"] == "/Pages":
                count = string.atoi(pages[3]["/Count"])
            else:
                count = 1
            if page < count:
                obj = i
                break
            page = page - count
            # and loop round to the next child
        fassert(obj != None, "unable to find requested page number")
        if pages[3]["/Type"] == "/Page":
            number, gen = i
            break # really got it
        pagekids = pages[3]["/Kids"]
    mode = "obj" # now we're just fetching an object as before

if mode == "pagecount":
    # Find the root of the /Pages tree and get its /Count field.
    catalog = fetchobj(f, xrefoff, number, gen)
    fassert(type(catalog[3]) == types.DictType, "expected dictionary in Catalog object")
    pagetop = catalog[3]["/Pages"]
    pagetopobj = fetchobj(f, xrefoff, pagetop[0], pagetop[1])
    print pagetopobj[3]["/Count"]

if mode == "obj":
    # We have an xref table offset and an object number. Go for it.
    fetchobj(f, xrefoff, number, gen, 1)
