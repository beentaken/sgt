Summary: The "arcfour" cipher isn't supported
Class: wish
Difficulty: fun
Priority: low
Content-type: text/plain

PuTTY doesn't support the "arcfour" (RC4) cipher in SSH-2.  Arcfour is
notable for being sunstantially faster than any cipher that PuTTY
currently supports.  Unfortunately, the way it's specified for SSH-2,
without discarding the first 1024 bytes of keystream, it's rather
weaker than it could be (though not dangerously so).  On the other
hand, not being a CBC-mode block cipher, it doesn't suffer from the
problems described in ssh2-cbc-weakness.

Using arcfour (or any other stream cipher) in SSH-1 would be a very bad
idea.  The lack of a MAC makes it very easy for an attacker to modify
the data stream.

There's a patch to add arcfour support to PuTTY below, but unless
there seems to be some actual demand for it, we plan to leave it out
until there's a secure way of using arcfour with SSH-2.

Index: ssharcf.c
===================================================================
--- ssharcf.c	(revision 0)
+++ ssharcf.c	(revision 0)
@@ -0,0 +1,88 @@
+/*
+ * Arcfour (RC4) implementation for PuTTY.
+ *
+ * Coded from Schneier.
+ */
+
+#include <assert.h>
+#include "ssh.h"
+
+typedef struct {
+    unsigned char i, j, s[256];
+} ArcfourContext;
+
+static void arcfour_block(void *handle, unsigned char *blk, int len)
+{
+    ArcfourContext *ctx = (ArcfourContext *)handle;
+    unsigned k;
+    unsigned char tmp, i, j, *s;
+
+    s = ctx->s;
+    i = ctx->i; j = ctx->j;
+    for (k = 0; k < len; k++) {
+	i  = (i + 1) & 0xff;
+	j  = (j + s[i]) & 0xff;
+	tmp = s[i]; s[i] = s[j]; s[j] = tmp;
+	blk[k] ^= s[(s[i]+s[j]) & 0xff];
+    }
+    ctx->i = i; ctx->j = j;
+}
+
+static void arcfour_setkey(ArcfourContext *ctx, unsigned char const *key,
+			   unsigned keybytes)
+{
+    unsigned char tmp, k[256], *s;
+    unsigned i, j;
+
+    s = ctx->s;
+    assert(keybytes <= 256);
+    ctx->i = ctx->j = 0;
+    for (i = 0; i < 256; i++) {
+	s[i] = i;
+	k[i] = key[i % keybytes];
+    }
+    j = 0;
+    for (i = 0; i < 256; i++) {
+	j = (j + s[i] + k[i]) & 0xff;
+	tmp = s[i]; s[i] = s[j]; s[j] = tmp;
+    }
+}
+
+/* -- Interface with PuTTY -- */
+
+static void *arcfour_make_context(void)
+{
+    return snew(ArcfourContext);
+}
+
+static void arcfour_free_context(void *handle)
+{
+    sfree(handle);
+}
+
+static void arcfour_key(void *handle, unsigned char *key)
+{
+    ArcfourContext *ctx = (ArcfourContext *)handle;
+    arcfour_setkey(ctx, key, 16);
+}
+
+static void arcfour_iv(void *handle, unsigned char *key)
+{
+
+}
+
+const struct ssh2_cipher ssh_arcfour_ssh2 = {
+    arcfour_make_context, arcfour_free_context, arcfour_iv, arcfour_key,
+    arcfour_block, arcfour_block,
+    "arcfour",
+    1, 128, "Arcfour"
+};
+
+static const struct ssh2_cipher *const arcfour_list[] = {
+    &ssh_arcfour_ssh2
+};
+
+const struct ssh2_ciphers ssh2_arcfour = {
+    sizeof(arcfour_list) / sizeof(*arcfour_list),
+    arcfour_list
+};
Index: settings.c
===================================================================
--- settings.c	(revision 5399)
+++ settings.c	(working copy)
@@ -17,6 +17,7 @@
     { "aes",	    CIPHER_AES },
     { "blowfish",   CIPHER_BLOWFISH },
     { "3des",	    CIPHER_3DES },
+    { "arcfour",    CIPHER_ARCFOUR },
     { "WARN",	    CIPHER_WARN },
     { "des",	    CIPHER_DES }
 };
Index: ssh.c
===================================================================
--- ssh.c	(revision 5399)
+++ ssh.c	(working copy)
@@ -4929,6 +4929,9 @@
 	      case CIPHER_AES:
 		s->preferred_ciphers[s->n_preferred_ciphers++] = &ssh2_aes;
 		break;
+	      case CIPHER_ARCFOUR:
+		s->preferred_ciphers[s->n_preferred_ciphers++] = &ssh2_arcfour;
+		break;
 	      case CIPHER_WARN:
 		/* Flag for later. Don't bother if it's the last in
 		 * the list. */
Index: ssh.h
===================================================================
--- ssh.h	(revision 5399)
+++ ssh.h	(working copy)
@@ -233,6 +233,7 @@
 extern const struct ssh2_ciphers ssh2_des;
 extern const struct ssh2_ciphers ssh2_aes;
 extern const struct ssh2_ciphers ssh2_blowfish;
+extern const struct ssh2_ciphers ssh2_arcfour;
 extern const struct ssh_kex ssh_diffiehellman_group1;
 extern const struct ssh_kex ssh_diffiehellman_group14;
 extern const struct ssh_kex ssh_diffiehellman_gex;
Index: Recipe
===================================================================
--- Recipe	(revision 5399)
+++ Recipe	(working copy)
@@ -205,7 +205,7 @@
 # SSH back end (putty, plink, pscp, psftp).
 SSH      = ssh sshcrc sshdes sshmd5 sshrsa sshrand sshsha sshblowf
          + sshdh sshcrcda sshpubk sshzlib sshdss x11fwd portfwd
-         + sshaes sshsh512 sshbn wildcard pinger
+         + sshaes sshsh512 sshbn wildcard pinger ssharcf
 WINSSH   = SSH winnoise winpgntc
 UXSSH    = SSH uxnoise uxagentc
 MACSSH   = SSH macnoise
Index: putty.h
===================================================================
--- putty.h	(revision 5399)
+++ putty.h	(working copy)
@@ -252,6 +252,7 @@
     CIPHER_BLOWFISH,
     CIPHER_AES,			       /* (SSH 2 only) */
     CIPHER_DES,
+    CIPHER_ARCFOUR,
     CIPHER_MAX			       /* no. ciphers (inc warn) */
 };
 
