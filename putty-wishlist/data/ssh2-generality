Summary: Support for SSH-2: zero, or more than one, terminal per session
Class: wish
Priority: medium
Difficulty: tricky
Fixed-in: r10083
Content-type: text/x-html-body

<p>
SSH-2 is a much more flexible protocol than SSH-1. It doesn't
require exactly one terminal session per SSH connection; you can
have more than one, or indeed none at all.

<p>
It would be nice if PuTTY could make use of this. For example, there
could be a System menu option to start an extra terminal window
inside the same SSH connection as the existing one(s). This would be
more efficient than the existing Duplicate Session command, and also
wouldn't require repeated authentication (which you don't care that
much about if you're using public keys, but you might care a lot if
you don't want to have to type your password in again).

<p>
Going in the other direction, several people have asked if it could
be possible to start PuTTY <em>without</em> starting a 
<a href="no-terminal-window.html">terminal window</a>
and a shell - just have PuTTY sit in the background and do
port forwarding only. This would also be possible in theory.

<p>
Similarly, perhaps we should also support running (e.g.) psftp
sessions over an existing connection rather than forcing a new TCP/SSH
connection - similar to the "connection multiplexing" feature in recent
versions of OpenSSH - using the same sort of inter-process
communication as with Pageant. Needs careful implementation to avoid
opening security holes.

<p>
Would we want the server part of such a feature implemented in all
the PuTTY utilities, or only in a dedicated application, perhaps one
created for <a href="no-terminal-window.html">`no-terminal-window'</a>?

<p>
<b>SGT, 2004-10-13</b>: Just checked in the easy bit. PuTTY and
Plink can now avoid running a command (equivalent to OpenSSH's
<code>-N</code> option, and indeed enabled by the same switch).
(PuTTY will still put up a terminal window.)

<p>
<b>SGT, 2013-11-17</b>: now implemented a 'connection sharing' system
configurable from the SSH panel. Instances of PuTTY can be told to
share each other's connections where possible, in which case the first
PuTTY to connect to a given user@host will set itself up as an
'upstream' able to forward stuff to the server on behalf of other
processes, and subsequent PuTTYs (and PSCPs, PSFTPs etc) will then use
that upstream if they can rather than make their own SSH connections.
