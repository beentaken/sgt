Summary: Vulnerability: non-coprime values in DSA signatures can cause buffer overflow in modular inverse
Class: vulnerability
Difficulty: fun
Priority: high
Absent-in: r568
Present-in: 0.52 0.53 0.53b 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62
Fixed-in: r9996 2013-08-05 0.63
Content-type: text/x-html-body

<p>
Many versions of PuTTY prior to 0.63 have a buffer overflow
vulnerability in the calculation of modular inverses when verifying a
DSA signature.

<p>
One step of the DSA signature verification procedure involves
computing the modular inverse of the integer <i>s</i> (part of the
signature) with respect to the integer <i>q</i> (part of the public
key). If <i>s</i> and <i>q</i> have any common factor, this modular
inverse cannot exist. Of course, such a signature is invalid (and
probably the private key is invalid too), but PuTTY will react to that
situation by its bignum code overflowing a buffer when it attempts to
divide by zero during Euclid's algorithm.

<p>
This bug applies to any DSA signature received by PuTTY, including
during the initial key exchange phase. Therefore, this bug can be
exploited by a malicious server, <em>before</em> the client has
received and verified a host key signature. So this attack can be
performed by a man-in-the-middle between the SSH client and server,
and the normal host key protections against MITM attacks are bypassed.
Even if you trust the server you <em>think</em> you are connecting to,
you are not safe.

<p>
We are unaware of any way in which this can lead to remote code
execution, since there is no control over the data written into the
heap.

<p>
This bug does not affect RSA keys.

<p>
This bug has been assigned CVE ID
<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4207">CVE-2013-4207</a>.
