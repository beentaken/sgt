#! /usr/bin/perl
# $Id: bugs2html,v 1.9 2002/09/14 10:33:17 jacob Exp $

use FileHandle;
use POSIX;
use English;

$bugdir = "../data";
$htmldir = "/u2/bjharris/public-html/putty-wishlist";
$baseurl = "/~sgtatham/putty";

%classdesc =
    ('bug'	=> "This is clearly an actual problem we want fixed.",
     'semi-bug'	=> "This might or might not be a bug, depending on your " .
                   "precise definition of what a bug is.",
     'wish'	=> "This is a request for an enhancement.");

%prioritydesc =
    ('high'	=> "This should be fixed in the next release.",
     'medium'	=> "This should be fixed one day.",
     'low'	=> "We aren't sure whether to fix this or not.",
     'never'	=> "We don't ever intend to fix this.");

%difficultydesc =
    ('fun'	=> "Just needs tuits, and not many of them.",
     'tricky'	=> "Needs many tuits.",
     'taxing'	=> "Needs external things we don't have (standards, users " .
		   "etc)",
     'mayhem'	=> "Probably impossible");

my @headers = ();
my $prlevel = my $level = 0;

my %bugs = ();
$INPUT_RECORD_SEPARATOR = undef;
foreach $bugfile (glob("$bugdir/*")) {
    next unless -f $bugfile;
    open(BF, "< $bugfile") or die "$bugfile: $!";
    my $data = <BF>;
    close BF;
    my ($bugname) = $bugfile =~ m{([^/]*)$};
    my ($hdr, $body) = $data =~ /^(.*?\n)\n(.*)$/s;
    $hdr =~ s/\n\s+/ /g;
    my @hdrs = split /\n/, $hdr;
    my %hdrs = map { /^(\S*?):\s*(.*)$/; (lc $1, $2) } @hdrs;
    $bugs{$bugname} = \%hdrs;
    bug2html($bugname, \%hdrs, $body);
}

my @fullbuglist = keys %bugs;

open(INDEX, "> $htmldir/index.html") or die "$htmldir/index.html: $!";

nest(<<EOF);
<HTML><HEAD>
<TITLE>PuTTY Known Bugs and Wish List</TITLE>
</HEAD>
<link rel="stylesheet" type="text/css" href="$baseurl/sitestyle.css" name="PuTTY Home Page Style">
<BODY>
<h1 align=center>PuTTY Known Bugs and Wish List</h1>

<p align=center>
<a href="$baseurl/">Home</a> |
<a href="$baseurl/licence.html">Licence</a> |
<a href="$baseurl/faq.html">FAQ</a> |
<a href="$baseurl/docs.html">Docs</a> |
<a href="$baseurl/download.html">Download</a> |
<a href="$baseurl/keys.html">Keys</a><br>
<a href="$baseurl/mirrors.html">Mirrors</a> |
<a href="$baseurl/maillist.html">Updates</a> |
<a href="$baseurl/feedback.html">Feedback</a> |
<a href="$baseurl/changes.html">Changes</a> |
<b>Wishlist</b></p>

<p>
This is the list of bugs that need fixing, and features that want
adding, to PuTTY. This list represents things that have not been
done to the current <em>development</em> code. If you do not see a
feature here, it's worth checking the
<a href="$baseurl/changes.html">Changes page</a>
before mailing us to ask for the feature; we might have already
added it since the last release.
EOF

nest(<<EOF);
<a name="fixed"><h2>Fixed things</h2></a>

<p>
These are items we believe to be already fixed in the development
snapshots.
EOF

my @fixed = grep(exists($bugs{$_}->{"fixed-in"}), @fullbuglist);

nest(<<EOF);
<h3>Bugs (and semi-bugs)</h3>
<ul>
EOF

my @tmp = grep(($bugs{$_}->{class} eq 'bug' ||
                $bugs{$_}->{class} eq 'semi-bug'), @fixed);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<h3>Wishes</h3>
<ul>
EOF

my @tmp = grep(($bugs{$_}->{class} eq 'wish'), @fixed);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<a name="bugs"><h2>Bugs</h2></a>

<p>
These items are clearly actual problems and I want them fixed.
<ul>
EOF

my @buglist = grep(($bugs{$_}->{class} eq 'bug'), @fullbuglist);
subtractbugs(\@fullbuglist, \@buglist);

my @tmp = grep(($bugs{$_}->{priority} eq 'high'), @buglist);
subtractbugs(\@buglist, printbugs(\@tmp, 1));

printbugs(\@buglist);

unnest("</ul>\n");

nest(<<EOF);
<h2>Semi-bugs</h2>

<p>
These are things which might be bugs or might not, depending on your
precise definition of what a bug is.

<ul>
EOF

my @tmp = grep(($bugs{$_}->{class} eq 'semi-bug'), @fullbuglist);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<h2>Wishlist</h2>

<p>
These are things that have been requested by users or which seem to me like
a good idea.  Not all of these are likely to be implemented without outside
help, and some of them will positively never be implemented.

EOF

my @wishlist = grep(($bugs{$_}->{class} eq 'wish'), @fullbuglist);

nest(<<EOF);
<p>
Features we'd like to include in the next release:

<ul>
EOF

my @tmp = grep(($bugs{$_}->{priority} eq 'high'),@wishlist);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<p>
Plausible features we hope to get round to adding at some point:

<ul>
EOF

my @tmp = grep(($bugs{$_}->{priority} eq 'medium'),@wishlist);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<p>
Features we're not sure about, or which probably won't get added
unless someone else does the hard work:

<ul>
EOF

my @tmp = grep(($bugs{$_}->{priority} eq 'low'),@wishlist);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

nest(<<EOF);
<h3>Non-wish list</h3>

<p>
These are features we are actively opposed to seeing in PuTTY. Don't
bother writing them and sending them to us! If you think you have a
good argument why they would be good, feel free to plead for them, but
generally I'll already have a good reason not to do them.

<ul>
EOF

my @tmp = grep(($bugs{$_}->{priority} eq 'never'),@wishlist);
subtractbugs(\@fullbuglist, printbugs(\@tmp));

unnest("</ul>\n");

unnest("");

nest(<<EOF);
<h2>Miscellaneous</h2>

<p>
Miscategorised bugs/wishes.

<ul>
EOF

printbugs(\@fullbuglist);

unnest("</ul>\n");

unnest(<<EOF);
<p><hr>Comments to
<a href="mailto:putty\@projects.tartarus.org">putty\@projects.tartarus.org</a>
<br>
(generated by bugs2html at
@{[POSIX::strftime("%a, %d %b %Y, %H:%M:%S %Z", gmtime)]})
</BODY></HTML>
EOF

close INDEX;

sub nest {
    my($header) = @_;
    push @headers, $header;
    $level++;
}

sub print_hdrs {
    for (my $i = $prlevel; $i < $level; $i++) {
        print INDEX $headers[$i];
    }
    $prlevel = $level;
}

sub unnest {
    my($trailer) = @_;
    $level--;
    if ($prlevel > $level) {
        print INDEX $trailer;
        $prlevel = $level;
    }
    pop @headers;
}


sub bug2html {
    my($bugname, $hdrs, $body) = @_;

    open(HTML, "> $htmldir/$bugname.html") or die "$htmldir/$bugname.html: $!";
    print HTML <<EOH;
<HTML><HEAD>
<TITLE>PuTTY @{[$hdrs->{class}]} $bugname</TITLE>
</HEAD>
<link rel="stylesheet" type="text/css" href="$baseurl/sitestyle.css" name="PuTTY Home Page Style">
<BODY>
<h1 align=center>PuTTY @{[$hdrs->{class}]} $bugname</h1>

<p align=center>
<a href="$baseurl/">Home</a> |
<a href="$baseurl/licence.html">Licence</a> |
<a href="$baseurl/faq.html">FAQ</a> |
<a href="$baseurl/docs.html">Docs</a> |
<a href="$baseurl/download.html">Download</a> |
<a href="$baseurl/keys.html">Keys</a><br>
<a href="$baseurl/mirrors.html">Mirrors</a> |
<a href="$baseurl/maillist.html">Updates</a> |
<a href="$baseurl/feedback.html">Feedback</a> |
<a href="$baseurl/changes.html">Changes</a> |
<b><a href="index.html">Wishlist</a></b></p>

EOH

    foreach $h (keys %$hdrs) {
	my($desc);
	$h eq "content-type" && next;
	$h eq "class" && ($desc = $classdesc{$hdrs->{$h}});
	$h eq "priority" && ($desc = $prioritydesc{$hdrs->{$h}});
	$h eq "difficulty" && ($desc = $difficultydesc{$hdrs->{$h}});
	print HTML "<b>$h</b>: ";
        if ($h eq "depends") {
            print HTML map "<a href=\"$_.html\">$_</a>", (split ' ', $hdrs->{$h});
	} elsif (defined($desc)) {
	    print HTML "<i>@{[$hdrs->{$h}]}:</i> $desc";
	} else {
	    print HTML $hdrs->{$h};
	}
	print HTML qq"<br>\n";
    }

    if ($hdrs->{'content-type'} =~ "^text/x-html-body") {
	print HTML $body;
    } else {
	$body =~ s/&/&amp;/g;
	$body =~ s/</&lt;/g;
	$body =~ s/>/&gt;/g;
	print HTML qq[<p><pre>$body</pre>];
    }

    print HTML <<EOF;
<p><a href="http://cvs.tartarus.org/putty-wishlist/data/$bugname">
Audit trail</a> for this @{[$hdrs->{class}]}.
<hr>Comments to
<a href="mailto:putty\@projects.tartarus.org">putty\@projects.tartarus.org</a>
<br>
(generated by bugs2html at
@{[POSIX::strftime("%a, %d %b %Y, %H:%M:%S %Z", gmtime)]})
</BODY></HTML>
EOF

    close(HTML);
}

sub printbugs {
    my ($buglist, $bold) = @_;
    $bold = 0 unless defined($bold);
    return unless @$buglist;
    print_hdrs();
    foreach $bug (sort @$buglist) {
        print INDEX bugdesc($bug, $bold);
    }
    return $buglist;
}

sub subtractbugs {
    my ($from, $buglist) = @_;
    my %del = ();
    map { $del{$_}=1 } @$buglist;
    @$from = grep ((!exists($del{$_})), @$from);
    return $from;
}

sub bugdesc {
    my ($bugname, $bold) = @_;
    $bold = 0 unless defined($bold);
    if ($bold) {
        return qq[<li><b><a href="$bugname.html">$bugname: ] .
               qq[$bugs{$bugname}->{summary}</a></b>\n];
    } else {
        return qq[<li><a href="$bugname.html">$bugname: ] .
               qq[$bugs{$bugname}->{summary}</a>\n];
    }
}
