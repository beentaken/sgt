# -*- sh -*-
# Build script to build Puzzles.

# First build some local binaries, to run the icon build.
in puzzles do perl mkfiles.pl
in puzzles do make

# Now build the screenshots and icons.
in puzzles/icons do xvfb-run make web winicons gtkicons

# Destroy the local binaries, mostly to avoid wasting network
# bandwidth by transferring them to the delegate servers.
in puzzles do make clean

# Build the OS X .dmg archive.
delegate osx
  in puzzles do make -f Makefile.osx clean
  in puzzles do make -f Makefile.osx release
  return puzzles/Puzzles.dmg
enddelegate

# Build the Windows binaries and the CHM file.
in puzzles do make -f Makefile.doc clean
in puzzles do make -f Makefile.doc chm
delegate windows
  # Ignore the poorly controlled return value from HHC, and instead
  # just test that the output file was generated.
  in puzzles do hhc puzzles.hhp; test -f puzzles.chm
  # FIXME: Cygwin alternative?
  in puzzles do cmd /c 'vcvars32 & nmake -f Makefile.vc clean'
  in puzzles do cmd /c 'vcvars32 & nmake -f Makefile.vc'
  return puzzles/puzzles.chm
  return puzzles/*.exe
enddelegate

# Build the help file and the HTML docs.
in puzzles do make -f Makefile.doc clean
in puzzles do make -f Makefile.doc
in puzzles do mkdir doc
in puzzles do mkdir devel
in puzzles/doc do halibut --html -Chtml-contents-filename:index.html -Chtml-index-filename:indexpage.html -Chtml-template-filename:%k.html -Chtml-template-fragment:%k ../puzzles.but
in puzzles/devel do halibut --html -Chtml-contents-filename:index.html -Chtml-index-filename:indexpage.html -Chtml-template-filename:%k.html -Chtml-template-fragment:%k ../devel.but

# Move the deliver-worthy Windows binaries (those specified in
# wingames.lst, which is generated by mkfiles.pl and helpfully
# excludes the command-line auxiliary utilities such as solosolver,
# and nullgame.exe) into a subdirectory for easy access.
in puzzles do mkdir winbin
in puzzles do mv `cat wingames.lst` winbin

# Make a zip file of the Windows binaries and help files.
in puzzles do zip -j puzzles.zip winbin/*.exe puzzles.chm puzzles.hlp puzzles.cnt

# Create the source archive. (That writes the archive into the
# _parent_ directory, so be careful when we deliver it.)
in puzzles do ./makedist.sh $(revision)

# Set up .htaccess containing a redirect for the archive filename.
in puzzles do echo "AddType application/octet-stream .chm" > .htaccess
in puzzles do echo "AddType application/octet-stream .hlp" >> .htaccess
in puzzles do echo "AddType application/octet-stream .cnt" >> .htaccess
in puzzles do set -- puzzles*.tar.gz; echo RedirectMatch temp '(.*/)'puzzles.tar.gz '$$1'"$$1" >> .htaccess

# Phew, we're done. Deliver everything!
deliver puzzles/icons/*-web.png $@
deliver puzzles/winbin/*.exe $@
deliver puzzles/.htaccess $@
deliver puzzles/doc/*.html doc/$@
deliver puzzles/devel/*.html devel/$@
deliver puzzles/Puzzles.dmg $@
deliver puzzles/puzzles.chm $@
deliver puzzles/puzzles.hlp $@
deliver puzzles/puzzles.cnt $@
deliver puzzles/puzzles.zip $@
# This one isn't in the puzzles subdir, because makedist.sh left it
# one level up.
deliver puzzles*.tar.gz $@
