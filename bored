#!/usr/bin/env python

import os
from subprocess import Popen, PIPE, STDOUT
import sys
import time
import select

f = open(os.environ["HOME"] + "/.bored", "r")
maxlen = 0
commands = []
while 1:
    s = f.readline()
    if s == "": break
    while s[-1:] in ["\r","\n"]: s = s[:-1]
    commands.append(s)
    if maxlen < len(s): maxlen = len(s)

maxlen = maxlen + 4

starttime = time.time()
now = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(starttime))
print "---", now

# 30 seconds should be ample timeout for the moment.
endtime = starttime + 30

os.setpgrp()

stuff = []
devnull = open("/dev/null", "r")
for command in commands:
    p = Popen(command, stdin=devnull, stdout=PIPE, stderr=STDOUT)
    if p:
        stuff.append([command, p, []])

while len(stuff) > 0:
    fds = map(lambda t: t[1].stdout, stuff) # get list of pipes
    r, w, x = select.select(fds, [], [], endtime - time.time())

    if len(r) == 0:
        # We timed out.
        prefix = ("TIMED OUT:" + " " * maxlen)[:maxlen]
        sys.stdout.write(prefix)
        space = ""
        for t in stuff:
            t[1].stdout.close()
            sys.stdout.write(space + t[0])
            space = " "
        sys.stdout.write("\n")

        # Vigorously kill all the subprocesses, so we don't leave them
        # hanging forever in whatever wedged state they've got into.
        # We take advantage here of the fact that neither os.popen2
        # nor the shell it invokes will move a process into a
        # different process group - so everything we need to kill is
        # in our own process group. But we move _ourself_ out of that
        # group before SIGKILLing the whole thing, so as to terminate
        # cleanly ourself!
        pid = os.getpid()
        pgid = os.getpgid(pid)
        os.setpgid(pid, os.getppid())
        os.kill(-pgid, 9)
        break

    newstuff = []
    for t in stuff:
        if t[1].stdout in r:
            s = t[1].stdout.readline()
            if s != "":
                t[2].append(s)
                newstuff.append(t)
            else:
                # This command has terminated. Write its output.
                t[1].stdout.close()
                t[1].wait()
                prefix = ("["+t[0]+"]" + " " * maxlen)[:maxlen]
                if len(t[2]) > 0:
                    for s in t[2]:
                        sys.stdout.write(prefix+s)
                        prefix = " " * maxlen
                else:
                    sys.stdout.write(prefix + "nothing to report\n")
        else:
            # This command was not readable; leave it on the list.
            newstuff.append(t)
    stuff = newstuff
