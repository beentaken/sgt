#!/usr/bin/perl

# Script to construct a git-svn clone on top of a given Subversion
# checkout. Does not fetch all the history; only clones the same
# revision as is currently checked out. On the other hand, any
# uncommitted local changes in the svn checkout become uncommitted
# changes in the git checkout too, so you can then do selective 'git
# add' of them.
#
# The idea is that if you need to prepare several patches in parallel
# to an SVN checkout area, you might just run 'gitify' to construct a
# throwaway git repository, manage your patches, commit them with 'git
# svn dcommit', and then once there's nothing uncommitted left, delete
# the .git subdirectory and do an ordinary svn update.
#
# There are probably hairier use cases which revolve around doing the
# Subversion commits by hand using the .svn metadata (which will still
# be present the whole time), which might help work around git-svn's
# unfortunate inability to handle SVN property updates, but I haven't
# thought those through yet...
#
# If run in the default mode, the working tree files will be left
# completely untouched, so that SVN keyword expansions will be marked
# as differences from the git head. You can use the '-r' option to
# make git-svnify attempt to handle that case intelligently, and
# retain only _meaningful_ local changes.

use File::Find;
use Cwd;

$checkoutdir = ".";
$verbose = 0;
$reapply = 0;

while (@ARGV) {
    $arg = shift @ARGV;
    if (!$nomoreopts and $arg =~ /^-(.)(.*)/) {
        if ($arg eq "--") { $nomoreopts = 1; next; }
        if ($1 eq "v") { $verbose = 1; next; }
        if ($1 eq "r") { $reapply = 1; next; }
        die "gitify: unrecognised option '-$1'\n";
    } else {
        $checkoutdir = $arg;
    }
}

chdir $checkoutdir or die "$checkoutdir: chdir: $!\n";

open INFO, "-|", "svn", "info";
while (<INFO>) {
    /^URL: (.*)$/ and do { $url = $1; };
}
close INFO;

die "svn info exited with status code $?\n" if $?;
die "svn info did not provide repository URL\n"
    unless defined $url;

open VER, "-|", "svnversion", ".";
$rev .= $_ while <VER>;
close VER;

die "svnversion exited with status code $?\n" if $?;
chomp($rev);
$rev =~ s/M$//;
die "svnversion did not provide checked-out revision number\n"
    unless $rev ne "";
die "svnversion reported version '$rev', which is not consistent\n"
    unless $rev =~ /^[0-9]+$/;

# Now look for the last _changed_ revision matching the checked-out
# one.
open INFO, "-|", "svn", "info", "-r$rev", $url;
while (<INFO>) {
    /^Last Changed Rev: (.*)$/ and do { $lcrev = $1; };
}
close INFO;

die "svn info exited with status code $?\n" if $?;
die "svn info did not provide last changed revision\n"
    unless defined $lcrev;

$rev = $lcrev;

# A normal 'git svn clone' would fail at the final step (attempting to
# check out the working tree) because those files are all already in
# the way. We add --no-checkout to inhibit this.
&run("git", "svn", "clone",
     ($verbose ? () : ("-q")),
     "--no-checkout", "-r$rev", $url, ".");

# --no-checkout inhibits _creation_ of the 'master' reference. So we
# create it here, and point it at git-svn.
&run("git", "update-ref", "refs/heads/master", "refs/remotes/git-svn");

# Set up a sensible .git/info/exclude.
open EXCLUDEIN, "-|", "git", "svn", "show-ignore";
open EXCLUDEOUT, ">>", ".git/info/exclude";
print EXCLUDEOUT ".svn/\n"; # ignore all '.svn' subdirectories
print EXCLUDEOUT $_ while <EXCLUDEIN>;
close EXCLUDEIN;
close EXCLUDEOUT;

# Populate the index from HEAD, without touching the working tree. In
# the absence of keyword substitution, this leaves us exactly where we
# want to be - the working tree is unmodified from how it started, and
# from git's point of view all the differences from the svn head look
# like working-copy changes unstaged even in the index.
&run("git", "reset", "--mixed",
     ($reapply ? ("-q") : ()));

# Save a snapshot of the original SVN checkout as a commit. This is
# vitally important if we're given -r (the reapply trick may go
# painfully wrong, in which case we'll need to provide the user with
# the state of the world before it happened), but also generally
# useful for reverting to the original state before deleting the .git
# directory.
&run("git", "add", "-u", "."); # don't include files we won't modify
&run("git", "commit", "-q", "--author=git-svnify <git-svnify>",
     "-mSnapshot of original SVN working tree.");
&run("git", "update-ref", "refs/remotes/git-svnify-snapshot", "HEAD");
&run("git", "reset", "--mixed", "-q", "git-svn");

# If -r was given, use 'svn diff' to get the changes from each
# modified file, and reapply them using 'git apply'. This should
# remove changes due only to keyword substitution, and leave only the
# meaningful changes.
#
# This is rather hacky at present, since it depends on the exact
# format of 'svn status' output which hasn't always remained constant.
# It would probably be better to use --xml and pull in a Perl XML
# parsing module, tedious though that would be.
if ($reapply) {
    # Retrieve diffs from svn and apply them in the index (where we
    # have a pristine but non-keyword-substituted version of each
    # file).
    #
    # We copy files _into_ the index if svn diff says they're
    # different but binary. That should arrange that we end up with
    # everything we need in the index.
    @files = ();
    $opened_gitapply = 0;
    $buffered_data = 0;
    open DIFF, "-|", "svn", "diff";
    $filename = undef;
    while (<DIFF>) {
        if (!$opened_gitapply) {
            $buffered_data .= $_;
        } else {
            print GITAPPLY $_;
        }

        if (/^Index: (.*)$/) { $filename = $1; }
        elsif (/^Cannot display/) { &run("git", "add", $filename); }
        elsif (/^[-+]/) {
            if (!$opened_gitapply) {
                open GITAPPLY, "|-", "git", "apply", "--cache", "-p0";
                print GITAPPLY $buffered_data;
                $buffered_data = "";
                $opened_gitapply = 1;
            }
        }
    }
    close DIFF;
    die "svn diff exited with status code $?\n" if $?;
    if ($opened_gitapply) {
        close GITAPPLY;
        # git apply can exit with code 256 if nothing needed doing
        die "git apply exited with status code $?\n" if $? & 255;
    }

    # Now copy the index into the working tree.
    &run("git", "checkout", "-f", "--", ".");

    # And reset the index to the head commit.
    &run("git", "reset", "--mixed");
}

sub run {
    my $hash;
    if ("HASH" eq ref $_[0]) {
        $hash = shift @_;
    } else {
        $hash = undef;
    }
    if ($verbose) {
        printf "%s\n", join " ", @_; # FIXME: better quoting
    }
    system @_;
    die "$_[0] returned exit status $?\n" if $? & 255;
}
