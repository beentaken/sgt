# -*- mode: sh; mode: fold -*-
# Simon Tatham's standardised chunk of .bashrc
# $Revision: 1.18 $

#{{{ I don't like .bash_history files. They wet their nests.
unset HISTFILE
rm -f ~/.bash_history
#}}}
#{{{ addpath and addpathback, for idempotent path management

addpath() {
  local a b c
  # Be able to accept a second argument which is an envvar name.
  # Otherwise, default to managing PATH.
  a=${2:-PATH}
  # Be able to accept a third argument which is a separator char.
  # Otherwise, default to a colon.
  c=${3:-:}
  # Retrieve the value of the variable whose name is given in $a.
  eval "b=\$$a"
  case "$b" in
    '') export $a="$1" ;;
    *"$c$1$c"* | "$1$c"* | *"$c$1" | "$1") ;;
    *) export $a="$1$c$b" ;;
  esac
}

addpathback() {
  local a b
  # Be able to accept a second argument which is an envvar name
  # Otherwise, default to managing PATH.
  a=${2:-PATH}
  # Be able to accept a third argument which is a separator char.
  # Otherwise, default to a colon.
  c=${3:-:}
  # Retrieve the value of the variable whose name is given in $a.
  eval "b=\$$a"
  case $b in
    '') export $a="$1" ;;
    *"$c$1$c"* | "$1$c"* | *"$c$1" | "$1") ;;
    *) export $a="$b$c$1" ;;
  esac
}

#}}}
#{{{ ~/bin should be on $PATH if it exists; also run bashrc_dopath
if test -d ~/bin; then
  addpath ~/bin
fi
if test x`type -t bashrc_dopath` = xfunction; then bashrc_dopath; fi
#}}}
#{{{ various global variables

bashrc_dovars() {
  local foo
  foo=`type -p less`
  if [ -n "$foo" ]; then export PAGER=$foo; export LESS=-M; fi
  foo=`type -p jed`
  if [ -n "$foo" ]; then export VISUAL=$foo; export EDITOR=$foo; fi
  export FAST_PNEWS=y
  export TRNINIT="-F>\  -h +hFrom +hNewsgroups +hDate +hFollowup-To -Os -q"
  # Complex ATTRIBUTION line for trn, causing the `In article' line to
  # disappear and also causing spaces to be trimmed from the ends of
  # the full name part
  export ATTRIBUTION="%(%)f=^ *\(.*[^ ]\) *?%1:%)f) <%>f> wrote:"
  export HOST_DEFAULTS=-R
  export CVS_RSH=ssh
  # LS_COLORS: file types
  LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01'
  LS_COLORS=$LS_COLORS':cd=40;33;01:or=40;31;01:ex=01;32'
  # LS_COLORS: archive extensions
  LS_COLORS=$LS_COLORS':*.tar=01;31'
  LS_COLORS=$LS_COLORS':*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31'
  LS_COLORS=$LS_COLORS':*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.deb=01;31'
  # LS_COLORS: image files
  LS_COLORS=$LS_COLORS':*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35'
  LS_COLORS=$LS_COLORS':*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35'
  # LS_COLORS: animations
  LS_COLORS=$LS_COLORS':*.mpg=01;37:*.avi=01;37:*.gl=01;37:*.dl=01;37'
  # LS_COLORS: header files
  LS_COLORS=$LS_COLORS':*.h=00;33:*_h.s=00;33:*.pm=00;33'
  # LS_COLORS: source files
  LS_COLORS=$LS_COLORS':*.c=01;33:*.cpp=01;33:*.py=01;33:*.s=01;33:*.pl=01;33:*.html=01;33'
  # LS_COLORS: all over bar the shouting
  export LS_COLORS
}
bashrc_dovars
unset bashrc_dovars

#}}}
#{{{ shell settings and aliases

set +o ignoreeof
set -P # disable bash's daft symlink confusion in pwd

for i in net v vdir d; do
  if [ x`type -t $i` = xalias ]; then unalias $i; fi
done
alias ed='ed -p "* "'
alias dir='ls -l'
ls -d --color=auto . >&/dev/null && alias ls='ls --color=auto'

#}}}
#{{{ keybindings to run Timber

# This is hideous. We wish to bind ^XM to ^A^Ktimber^J.
#
# On sensible (bash2) systems we can do
#   bind '"\C-xM": "\001\013timber\n"'
# because `bind' itself is competent to read the backslash escapes in the
# key sequence specification.
#
# On bash1 systems we can't do this, and we're forced to convert the
# escapes by some other means, like having them parsed by echo -e. So I'd
# expect to be able to do
#   bind "`echo -e '"\\C-xM": "\001\013timber\n"'`"
# But this doesn't work, because there's a problem with backslash processing
# inside backquotes in bash1. Consider
#   echo `echo '\\'`
# This ought to give you two backslashes, right? Because backslashes inside
# single quotes are unaffected, right? Wrong, because the backquotes kill
# one of 'em off for no reason. Now as it happens, the echo -e thing works
# OK in this case, but it's not what I'd call _reliable_, because it depends
# on echo -e translating `\C' to `\C'. In other words, it relies on there
# having been no new escape sequence called \C introduced into the set of
# things understood by echo -e.
#
# We can circumvent the problem if we set the echo -e string in a separate
# shell variable and let all the complicated quoting happen in a sane
# environment:
#
#   we want to echo      "\C-xM": "^A^Ktimber^J"  [where '^A' etc are special]
#   in `echo -e' that's  "\\C-xM": "\001\013timber\n"    [doubled first \]
#   single-quote it      '"\\C-xM": "\001\013timber\n"'
#   and assign into a shell variable or parameter.
#
# So we can do
#
#   set -- '"\\C-xM": "\001\013timber\n"'
#   bind "`echo -e "$1"`"
#
# and get away with it.

bashrc_do_bindings() {
  set -- '"\\C-xM": "\001\013timber\n"'
  bind "`echo -e "$1"`"
  set -- '"\\C-xm": "\001\013timber '\'\''\n"'
  bind "`echo -e "$1"`"
}
bashrc_do_bindings
unset bashrc_do_bindings

#}}}
#{{{ prompt configuration

doPSn() {
  local hostname=`hostname`
  local spaces=`echo -n $hostname | sed 's/./ /g'`
  local bold=`tput bold | sed 's/\[1m/\[0;3${promptcolour}m/'`
  local sgr0=`tput sgr0`
  PS1='\['$bold'\]:$prompttext '$hostname';\['$sgr0'\] '
  PS2='$promptspaces    '"$spaces"
  promptcolour=2 # green prompt by default
}
doPSn
unset doPSn
unset promptfixed
promptprefix() {
  case $1 in
    '' | ' '*) prompttext="$promptfixed$*" ;;
    *) prompttext="$promptfixed $*" ;;
  esac
  promptspaces=`echo -n "$prompttext" | sed 's/./ /g'`
}

#}}}
#{{{ the `i' command
i() {
  echo Session is `whoami` on `tty | sed s/.dev.//` of `hostname`
}
#}}}
#{{{ the `x' command (hex/decimal printout)
x() {
  perl -e 'foreach $x (@ARGV) { printf "%11d = 0x%08x\n", $x, $x }' -- "$@"
}
#}}}
#{{{ screen has a bug about shells beginning with -. Work around it
case $SHELL in
  -*) export SHELL=`echo $SHELL | sed s/^-//` ;;
esac
#}}}
