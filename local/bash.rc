# -*- mode: sh; mode: fold -*-
# Simon Tatham's standardised chunk of .bashrc
# $Revision$

#{{{ I don't like history files. They wet their nests.
unset HISTFILE
rm -f ~/.bash_history 2>/dev/null # if the filesystem is RO, don't whine
export LESSHISTFILE=-
rm -f ~/.lesshst 2>/dev/null # if the filesystem is RO, don't whine
#}}}
#{{{ `realpath', just in case it isn't available as a real command

bashrc_dorealpath() {
  local foo
  foo=`type -p realpath`
  if [ ! -e "$foo" ]; then
    # Try Perl.
    realpath() {
      perl -e 'use Cwd '\''realpath'\''; print +(realpath $ARGV[0]), "\n"' "$1"
    }
    foo=`realpath / 2>/dev/null`
    if [ "z$foo" != "z/" ]; then
      # Now try Python.
      realpath() {
        python -c 'import os;import sys;print os.path.realpath(sys.argv[1])' \
          "$1"
      }
      foo=`realpath / 2>/dev/null`
      if [ "z$foo" != "z/" ]; then
        # Give up.
        realpath() {
          echo "$PWD/$1"
        }
      fi
    fi
  fi
}
bashrc_dorealpath
unset bashrc_dorealpath

#}}}
#{{{ addpath, addpathback and rmpath, for idempotent path management

addpath() {
  local a b c
  # Canonicalise a supplied relative pathname, unless -x is given.
  case "$1" in
    -x) shift ;; # treat the next argument literally
    /*) ;; # the pathname is already absolute
    *) a="$1"; shift; set -- "`realpath $a`" "$@" ;; # canonicalise it
  esac
  # Be able to accept a second argument which is an envvar name.
  # Otherwise, default to managing PATH.
  a=${2:-PATH}
  # Be able to accept a third argument which is a separator char.
  # Otherwise, default to a colon.
  c=${3:-:}
  # Retrieve the value of the variable whose name is given in $a.
  eval "b=\"\$$a\""
  case "$b" in
    '') export $a="$1" ;;
    *"$c$1$c"* | "$1$c"* | *"$c$1" | "$1") ;;
    *) export $a="$1$c$b" ;;
  esac
}

addpathback() {
  local a b c
  # Canonicalise a supplied relative pathname, unless -x is given.
  case "$1" in
    -x) shift ;; # treat the next argument literally
    /*) ;; # the pathname is already absolute
    *) a="$1"; shift; set -- "`realpath $a`" "$@" ;; # canonicalise it
  esac
  # Be able to accept a second argument which is an envvar name
  # Otherwise, default to managing PATH.
  a=${2:-PATH}
  # Be able to accept a third argument which is a separator char.
  # Otherwise, default to a colon.
  c=${3:-:}
  # Retrieve the value of the variable whose name is given in $a.
  eval "b=\"\$$a\""
  case $b in
    '') export $a="$1" ;;
    *"$c$1$c"* | "$1$c"* | *"$c$1" | "$1") ;;
    *) export $a="$b$c$1" ;;
  esac
}

rmpath() {
  # Use IFS to separate the path into its components.
  local IFS i useit colon removed varname oldpath newpath

  # By default we manage $PATH and it's separated by colons. These
  # can change.
  varname=${2:-PATH}
  IFS=${3:-:}
  eval "oldpath=\"\$$varname\""

  # Construct a new path from all the components except the one we
  # wish to remove.
  newpath=""
  colon=""
  removed=no
  for i in $oldpath; do
    useit=yes
    if [ "x$i" = "x$1" ]; then useit=no; removed=yes; fi
    if [ "$useit" = "yes" ]; then newpath="$newpath$colon$i"; colon="$IFS"; fi
  done
  if [ "$removed" = "no" ]; then
    echo rmpath: element "$1" not found in "\$$varname" >&2
    return 1
  fi
  eval "$varname=\"\$newpath\""
  return 0
}

showpath() {
  # Use IFS to separate the path into its components.
  local IFS i useit colon removed varname oldpath newpath

  # By default we manage $PATH and it's separated by colons. These
  # can change.
  varname=${1:-PATH}
  IFS=${2:-:}
  eval "oldpath=\"\$$varname\""

  for i in $oldpath; do echo $i; done
}

#}}}
#{{{ if I'm running this as root then make sure /{,usr/}sbin are on path
case "`id`" in
  uid=0\(* )
    test -d /sbin && addpath /sbin
    test -d /usr/sbin && addpath /usr/sbin
    ;;
esac
#}}}
#{{{ various global variables

bashrc_dovars() {
  bashrc_hostname=`hostname | sed 's/\..*$//' | tr A-Z a-z`
  bashrc_home="$(cd $HOME; set -P; pwd)"
  if [ -f $HOME/.hostaliases ]; then
    export HOSTALIASES=$HOME/.hostaliases; fi
  export FAST_PNEWS=y
  export TRNINIT="-F>\  -h +hFrom +hNewsgroups +hDate +hFollowup-To -Os -q"
  # Complex ATTRIBUTION line for trn, causing the `In article' line to
  # disappear and also causing spaces to be trimmed from the ends of
  # the full name part
  export ATTRIBUTION="%(%)f=^ *\(.*[^ ]\) *?%1:%)f) <%>f> wrote:"
  export HOST_DEFAULTS="-R -T"
  export CVS_RSH=ssh
  # LS_COLORS: file types
  LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=00;33:so=01;35:bd=01;33'
  LS_COLORS=$LS_COLORS':cd=01;33:or=00;31:ex=01;32'
  # LS_COLORS: archive extensions
  LS_COLORS=$LS_COLORS':*.tar=01;31'
  LS_COLORS=$LS_COLORS':*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31'
  LS_COLORS=$LS_COLORS':*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31'
  LS_COLORS=$LS_COLORS':*.deb=01;31:*.bz2=01;31'
  # LS_COLORS: image files
  LS_COLORS=$LS_COLORS':*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.ppm=01;35'
  LS_COLORS=$LS_COLORS':*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35'
  LS_COLORS=$LS_COLORS':*.png=01;35'
  # LS_COLORS: animations
  LS_COLORS=$LS_COLORS':*.mpg=01;37:*.avi=01;37:*.gl=01;37:*.dl=01;37'
  # LS_COLORS: header files
  LS_COLORS=$LS_COLORS':*.h=00;33:*_h.s=00;33:*.pm=00;33:*.hh=00;33'
  # LS_COLORS: source files
  LS_COLORS=$LS_COLORS':*.c=01;33:*.cpp=01;33:*.cc=01;33:*.m=01;33:*.py=01;33:*.s=01;33:*.pl=01;33:*.html=01;33'
  # LS_COLORS: all over bar the shouting
  export LS_COLORS
  # trn4 doesn't know screen can do xterm mouse reporting, although
  # it will notice in xterms. We give it a hint here.
  case "$TERM" in
    xterm* | screen*) export XTERMMOUSE=yes ;;
  esac
}
bashrc_dovars
unset bashrc_dovars

#}}}
#{{{ ~/bin should be on $PATH if it exists; also run bashrc_dopath
if test -d ~/bin; then
  addpath ~/bin
fi
if test x`type -t bashrc_dopath` = xfunction; then bashrc_dopath; fi
#}}}
#{{{ more global variables, the ones that need $PATH set up to get right

bashrc_dovars2() {
  local foo
  foo=`type -p less`
  if [ -n "$foo" ]; then export PAGER=$foo; export LESS=-M; fi
  foo=`type -p emacs`
  if [ -x "$foo" -a -x "${foo}client" -a -n "$DISPLAY" ]; then
    # Under X, the 'e' command (defined below) will expect to connect
    # to a long-running GUI emacs.
    bashrc_emacslaunch=("${foo}client" --no-wait)
  elif [ -x "$foo" ]; then
    # In a command-line situation, or if emacsclient just isn't
    # available, 'e' launches an ordinary emacs instead.
    bashrc_emacslaunch=("${foo}")
  else
    unset bashrc_emacslaunch
  fi
  if [ ! -e "$foo" ]; then
    foo=`type -p jed`; fi
  if [ ! -e "$foo" ]; then
    foo=`type -p vi`; fi
  export VISUAL=$foo
  export EDITOR=$foo
}
bashrc_dovars2
unset bashrc_dovars2

if test "${#bashrc_emacslaunch[*]}" -gt 0; then
  e() {
    # Compilers and grep often output locations in files in the form
    # 'filename:line-number'. To facilitate pasting such a thing, we
    # spot it here and turn it into the appropriate emacsclient or
    # emacs rune.
    #
    # To work around this behaviour, you can prepend the argument
    # '+1', which will force the next argument to be treated as the
    # filename even if it ends in :digits.
    local suffix
    case "$1" in
        *:*)
            # We have at least one colon in the string. Look at the
            # stuff to the right of the rightmost one.
            suffix=${1##*:}
            case "$suffix" in
                *[^0-9]*) ;;
                *)
                    # The suffix is made of nothing but digits. We've
                    # found a line number!
                    set -- "+$suffix" "${1%:*}"
            esac
            ;;
    esac

    # It would be nice here if we could detect that a server-enabled
    # emacs was not already running, and respond by launching one in
    # the background and then retrying this command.
    "${bashrc_emacslaunch[@]}" "$@"
  }
fi

#}}}
#{{{ shell settings and simple aliases

set +o ignoreeof
set -P # disable bash's daft symlink confusion in pwd
# Async job notification is great if it works properly.
set -o notify-sensibly 2>/dev/null && set -b

set +H # history expansion with ! always gets in my way

HISTCONTROL=ignoredups

unalias -a # dammit, if there are any aliases _I_ want to do them!
alias ed='ed -p "* "'
alias dir='ls -l'
ls -d --color=auto . >&/dev/null && alias ls='ls --color=auto'

# ping, traceroute and route are useful programs and should be
# available even if they're not on $PATH. Usually if this is the
# case they're in /usr/sbin or /sbin.
findcmd() {
  local cmd=$1
  local t=`type -t $cmd`
  local f=""
  if [ -z "$t" ]; then
    [ -x /sbin/$cmd ] && f=/sbin/$cmd
    [ -x /usr/sbin/$cmd ] && f=/usr/sbin/$cmd
  fi
  if [ -n "$f" ]; then
    eval "$cmd() { $f \"\$@\"; }"
  fi
}
findcmd ping
findcmd traceroute
findcmd route
unset findcmd

if [ -z "`type -path axe`" -a -n "`type -path tweak`" ]; then
  eval 'axe() { tweak "$@"; }'
fi

# mcd, to make a directory and immediately change into it.
mcd() {
  mkdir -p "$1" && cd "$1"
}

# `xu', to dump a UTF-8 analysis of the contents of the clipboard.
xu() {
  xcopy -u -r | cvt-utf8 -i
}

# sgt-jotting-export, wrapping my batch-mode-emacs facility of the
# same name
sgt-jotting-export() {
    local i
    if test $# -gt 0; then
        for i in "$@"; do
            emacs --batch -l ~/.emacs "$i" -f sgt-jotting-export 2>/dev/null
        done
    else
        emacs --batch -l ~/.emacs -f sgt-jotting-export-stdin 2>/dev/null
    fi
}

#}}}
#{{{ keybindings to run Timber

# This is hideous. We wish to bind ^XM to ^A^Ktimber^J.
#
# On sensible (bash2) systems we can do
#   bind '"\C-xM": "\001\013timber\n"'
# because `bind' itself is competent to read the backslash escapes in the
# key sequence specification.
#
# On bash1 systems we can't do this, and we're forced to convert the
# escapes by some other means, like having them parsed by echo -e. So I'd
# expect to be able to do
#   bind "`echo -e '"\\C-xM": "\001\013timber\n"'`"
# But this doesn't work, because there's a problem with backslash processing
# inside backquotes in bash1. Consider
#   echo `echo '\\'`
# This ought to give you two backslashes, right? Because backslashes inside
# single quotes are unaffected, right? Wrong, because the backquotes kill
# one of 'em off for no reason. Now as it happens, the echo -e thing works
# OK in this case, but it's not what I'd call _reliable_, because it depends
# on echo -e translating `\C' to `\C'. In other words, it relies on there
# having been no new escape sequence called \C introduced into the set of
# things understood by echo -e.
#
# We can circumvent the problem if we set the echo -e string in a separate
# shell variable and let all the complicated quoting happen in a sane
# environment:
#
#   we want to echo      "\C-xM": "^A^Ktimber^J"  [where '^A' etc are special]
#   in `echo -e' that's  "\\C-xM": "\001\013timber\n"    [doubled first \]
#   single-quote it      '"\\C-xM": "\001\013timber\n"'
#   and assign into a shell variable or parameter.
#
# So we can do
#
#   set -- '"\\C-xM": "\001\013timber\n"'
#   bind "`echo -e "$1"`"
#
# and get away with it.

case "$-" in
  *i*) # only do this if the shell is interactive
    bashrc_do_bindings() {
      set -- '"\\C-xM": "\001\013timber\n"'
      bind "`echo -e "$1"`"
      set -- '"\\C-xm": "\001\013timber '\'\''\n"'
      bind "`echo -e "$1"`"
      set -- '"\\C-x\\C-m": "\001\013timber -f "'
      bind "`echo -e "$1"`"
    }
    bashrc_do_bindings
    unset bashrc_do_bindings
    ;;
esac

#}}}
#{{{ F7 to execute macro

# My Jed configuration uses F7 for execute-macro as a more pleasant
# alternative to ^X e. Since the record-macro keys are the same
# between bash and Jed, I want my favourite execute-macro key in
# both places as well.
case "$-" in
  *i*) # only do this if the shell is interactive
    bind '"\e[18~": call-last-kbd-macro'
    ;;
esac

#}}}
#{{{ fix tput weirdnesses

# Local tput wrapper which doesn't object to $TERM being unset...
_bashrc_tput() {
  test -n "$TERM" && tput "$@"
}
# ... and for some reason I sometimes get $TERM set _but not
# exported_, boggle.
export TERM

#}}}
#{{{ prompt configuration

doPSn() {
  local hostname=`hostname | sed 's/\..*$//' | tr A-Z a-z`
  local spaces=`echo -n $hostname | sed 's/./ /g'`
  # Some seds ignore a partial line at the end of their input -
  # they won't process it, or even bother to output it unchanged.
  # Hence instead of writing `tput bold | sed', I save the output
  # of tput and then use `echo' to feed it to sed, because echo
  # will append a newline. Of course the backticks will remove the
  # newline afterwards (as they did in the original `tput bold`).
  local bold=`_bashrc_tput bold`
  local colour=`echo "$bold" | sed 's/\[1m/\[0;3${promptcolour}m/'`
  local sgr0=`_bashrc_tput sgr0`
  PS1='\['$colour'\]:$prompttext '$hostname';\['$sgr0'\] '
  PS2='$promptspaces    '"$spaces"
  # Default prompt colour is purple, but I attempt to fall back to
  # green in absence of 256-colour mode. A 256-colour-capable terminal
  # should interpret the following codes (recall that the above
  # definition of $colour prefixes a 3 to the first one) as:
  #  - SGR 32 (ordinary green)
  #  - SGR 38;5;93 (xterm 256-colour index 93, which is at 2,0,5 in
  #    the RGB colour cube running from 0,0,0 to 5,5,5)
  #  - SGR 25 (turn off blinking, which wasn't on anyway)
  # And hopefully a non-256-colour-capable terminal will interpret it
  # as:
  #  - SGR 32 (ordinary green)
  #  - SGR 38 (dunno, so ignore it)
  #  - SGR 5 (turn on blinking)
  #  - SGR 93 (dunno, so ignore it)
  #  - SGR 25 (turn off blinking, which was turned on by the 5 above).
  # One other possibility is that a non-256-colour terminal might
  # still support the 90-97 and 100-107 SGRs for bright foreground and
  # background colours respectively, in which case this scheme will
  # come out as a bright yellow prompt.
  promptcolour='2;38;5;93;25'
}
doPSn
unset doPSn

unset promptfixed
bashrc_prompt_prefix=

promptprefix() {
  case $1 in
    '' | ' '*) bashrc_prompt_prefix="$*" ;;
    *) bashrc_prompt_prefix=" $*" ;;
  esac
  prompttext="$promptfixed$bashrc_prompt_prefix"
  promptspaces=`echo -n "$prompttext" | sed 's/./ /g'`
}

if test -f /etc/debian_chroot; then
    promptfixed=" chroot:$(cat /etc/debian_chroot)"
    promptprefix
fi

#}}}
#{{{ registering pre-prompt commands

# Generic method for adding functionality to _prompt_cmd without
# having to know the rest of the contents of the function.

bashrc_prompt_fns=:

bashrc_add_prompt_fn() {
  bashrc_prompt_fns="$bashrc_prompt_fns $1"
}

bashrc_rm_prompt_fn() {
  rmpath "$1" bashrc_prompt_fns " "
}

_prompt_cmd() {
  local i
  local IFS
  IFS=" " # some bashes don't seem to like "unset" as a method here
  for i in $bashrc_prompt_fns; do $i; done
}

PROMPT_COMMAND=_prompt_cmd

#}}}
#{{{ registering checks on the current directory

# Method of registering functions to be called on a change of directory.

bashrc_changedir_fns=:

bashrc_add_changedir_fn() {
  bashrc_changedir_fns="$bashrc_changedir_fns $1"
}

bashrc_rm_changedir_fn() {
  rmpath "$1" bashrc_changedir_fns " "
}

bashrc_pwd="`pwd -P`"

bashrc_change_cd() {
  local newpwd="`pwd -P`"
  local i
  if [ "$bashrc_pwd" != "$newpwd" ]; then
    for i in $bashrc_changedir_fns; do $i "$bashrc_pwd" "$newpwd"; done
  fi
  bashrc_pwd="$newpwd"
}

cd() {
  if builtin cd "$@"; then
    bashrc_change_cd
    return 0
  else
    return $?
  fi
}

pushd() {
  if builtin pushd "$@"; then
    bashrc_change_cd
    return 0
  else
    return $?
  fi
}

popd() {
  if builtin popd "$@"; then
    bashrc_change_cd
    return 0
  else
    return $?
  fi
}

#}}}
#{{{ X window title configuration

# Above, I worked out $bashrc_home, which is the realpath of my home
# directory. Substituting this with ~ when it appears at the front of
# $PWD is generally the right thing, but there's one special case:
# what if $PWD is _right now_ itself a symlinkful path? I've done 'set
# -P' above, but that doesn't correct the existing value of PWD - it
# will only be reset when I change directory.
#
# Hence, force an update now.
cd . # this is the silliest shell command I've ever had to write

if [ -t 1 ]; then case "$TERM" in
  xterm | screen)

    # We maintain in the shell variable 'bashrc_xtitle' our current idea
    # of what we want the X title bar to say. Before printing any shell
    # prompt, we refresh this in the terminal. (So that, in particular,
    # subshells or ssh sessions which changed the title to read some
    # other hostname or directory will get cleaned up.)
    bashrc_update_xtitle() {
      [ -n "$bashrc_xtitle" ] && echo -ne '\033]0;'"$bashrc_xtitle"'\007'
    }
    bashrc_add_prompt_fn bashrc_update_xtitle

    # We assign our title bar to be based on the hostname and current
    # directory, which means we must update it after every chdir.
    #
    # Use $bashrc_home rather than $HOME to deal with the possibility
    # that $HOME proper might be set to a symlink rather than the
    # canonical path of my home dir (e.g. on atreus).
    bashrc_compute_xtitle() {
      bashrc_xtitle="${USER}@${bashrc_hostname}:${PWD/$bashrc_home/~}"
    }
    bashrc_compute_xtitle # do this _now_ ...
    bashrc_add_changedir_fn bashrc_compute_xtitle # ... and after any chdir

  esac
fi

#}}}
#{{{ policing secure areas of the file system

bashrc_is_securedir() {
  local globsetting
  local secure
  local i
  case $- in *f*) globsetting=-f;; *) globsetting=+f;; esac
  set -f # inhibit globbing for this function
  secure=1
  if [ "$bashrc_securedirs" ]; then
    for i in $bashrc_securedirs; do
      case "$1" in $i | $i/*) secure=0;; esac
    done
  fi
  set $globsetting
  return $secure
}

bashrc_go_secure() {
  bashrc_insecure_umask=`umask`
  umask 077
  promptcolour=1\;1
  promptfixed=" secure"
  promptprefix "$bashrc_prompt_prefix"
}

bashrc_go_insecure() {
  umask $bashrc_insecure_umask
  promptcolour=2
  promptfixed=
  promptprefix "$bashrc_prompt_prefix"
}

bashrc_securedir_change() {
  local newsecure  
  local banner
  local unbanner

  newsecure=yes
  bashrc_is_securedir "$2" || newsecure=no

  if [ "$bashrc_securedir $newsecure" = "no yes" ]; then
    # On entering a secure area, save the previous umask, set
    # the new umask to 077, and print a banner.
    bashrc_go_secure
    banner=`_bashrc_tput bold | sed 's/\[1m/\[1;36;44m/'`
    unbanner=`_bashrc_tput sgr0`
    echo "$banner  You are now entering a secure area.  $unbanner"
    echo "$banner  Changed your umask: $bashrc_insecure_umask -> 077.      $unbanner"
  fi
  
  if [ "$bashrc_securedir $newsecure" = "yes no" ]; then
    # On leaving a secure area, restore the umask.
    banner=`_bashrc_tput bold | sed 's/\[1m/\[1;36;44m/'`
    unbanner=`_bashrc_tput sgr0`
    echo "$banner  You are now leaving a secure area.  $unbanner"
    echo "$banner  Restored your umask to $bashrc_insecure_umask.         $unbanner"
    bashrc_go_insecure
  fi

  bashrc_securedir=$newsecure
}

bashrc_add_changedir_fn bashrc_securedir_change

bashrc_securedir=no
if bashrc_is_securedir "`pwd -P`"; then
  bashrc_securedir=yes
  bashrc_go_secure
fi

#}}}
#{{{ the `i' command
i() {
  echo Session is `whoami` on `tty | sed s/.dev.//` of `hostname`
}
#}}}
#{{{ experimental hideous alias hackery

# For starters, here's a standard way to override _any_ weirdass
# aliasing I might feel like doing. Alias recognition is done
# before variable and parameter expansion, so this very simple
# command prefix prevents any command being expanded as an alias.
real() { "$@"; }

# When I run `find', `findgrep' and `xlsfonts', I often use
# wildcards and rarely want them quoted, so it seems sensible to
# disable globbing for these commands only. I always have `real' if
# I need to do things the usual way.

bashrc_restore_glob_settings() {
  case "$bashrc_a_shopts" in
    *noglob*) ;;
    *) set +f ;;
  esac
  unset bashrc_a_shopts
}

bashrc_add_prompt_fn bashrc_restore_glob_settings

alias find='bashrc_a_shopts="$SHELLOPTS"; set -f; find'
alias findgrep='bashrc_a_shopts="$SHELLOPTS"; set -f; findgrep'
alias xlsfonts='bashrc_a_shopts="$SHELLOPTS"; set -f; xlsfonts'

#}}}
#{{{ the `x' command (interface to bash's calculator, with hex+dec printout)

# This also uses the magic alias trick from above, so that '*' can
# be specified in an argument without having to quote it. You still
# have to quote, or explicitly $[...], some other characters -
# notably parentheses and many bitwise operators like &, | and << -
# but for common operations it makes life just a little easier.

bashrc_x_internal() {
  local i j
  for i in "$@"; do
    eval "j=\$[$i]" && \
      perl -e 'printf "%11d = 0x%08x\n", $ARGV[0], $ARGV[0]' -- "$j"
  done
}
alias x='bashrc_a_shopts="$SHELLOPTS"; set -f; bashrc_x_internal'

#}}}
#{{{ `rfc' as a quick shortcut to find RFCs

rfc() {
  local filename
  local host
  local nameonly
  local url
  nameonly=no
  host="www.ietf.org"
  while test $# -gt 0; do
    case $1 in
      -h) host="$2"; shift;;
      -n) nameonly=yes;;
      --help) echo "Usage: rfc [-h hostname] [index | rfc-number]";
              return 0;;
      -*) echo Unrecognised option "$1" >&2; return 1 ;;
      *) if test "$1" = "index"; then
           filename=rfc-index.txt
	 else
	   filename=rfc$1.txt
	 fi ;;
    esac
    shift
  done

  url="http://$host/rfc/$filename"
  if test $nameonly = yes; then
    echo "$url"
  else
    wget -q -O - "$url" | env LESSOPEN="|cat" less $filename
  fi
}

#}}}
#{{{ `do-ssh-add': conveniently add SSH keys when no agent is running

do-ssh-add() {
  exec ssh-agent $SHELL -c 'ssh-add; exec $SHELL'
}

#}}}
#{{{ screen has a bug about shells beginning with -. Work around it
case $SHELL in
  -*) export SHELL=`echo $SHELL | sed s/^-//` ;;
esac
#}}}
#{{{ shell function wrapper on `less' which transforms it into `ls' on dirs

less() {
  if test "$#" = 1 && test -d "$1"; then
    command ls "$@"
  else
    command less "$@"
  fi
}

#}}}
#{{{ shell function wrapper on `tr' which allows optional filename args

tr() {
  local i j a d s
  i=$#
  j=2
  d=0
  s=0
  while test "$i" -gt 0 -a "$j" -gt 0; do
    case "$1" in
      # Spot options: -d means we expect only one input char set,
      # but -s means we expect two; -s overrides -d if both appear.
      -*s*d* | -*d*s*) d=1; s=1; j=$[1 + ($s || !$d)];;
      -*d*) d=1; j=$[1 + ($s || !$d)];;
      -*s*) s=1; j=$[1 + ($s || !$d)];;
      # Spot and ignore other option strings.
      -*[a-z]*) ;; # some options or other
      # Spot char sets.
      *) j=$[$j-1] ;; # a char set argument
    esac
    a="$1"
    shift
    set -- "$@" "$a"
    i=$[$i-1]
  done
  # Now one of two things has happened. Either i has hit zero,
  # which means there was nothing on the command line except proper
  # tr arguments; or j has hit zero, which means there's some
  # command line stuff remaining
  if test "$i" -gt 0; then
    # The following loop depends on a subtle shell semantics issue:
    # the pipe character causes a fork _before_ the while loop is
    # run, thus $i and "$@" start off with the same values on each
    # side of the pipe.
    while test "$i" -gt 0; do
      command cat "$1"
      shift
      i=$[$i-1]
    done | { shift "$i"; tr "$@"; }
  else
    # Just run tr; the arguments should all have been rotated back
    # into the right order.
    command tr "$@"
  fi
}

#}}}
#{{{ shell function which combines cat and zcat

zzcat() {
   local i
   for i in "$@"; do
       zcat "$i" 2>/dev/null || cat "$i"
   done
}

#}}}
#{{{ shellquote() and verbose()

shellquote() {
  local i x y s ret
  i=$#
  s=""
  ret=""
  while [ $i -gt 0 ]; do
    x="$1"
    shift 
    i=$[$i-1]
    ret="$ret$s"
    s=" "
    case "$x" in
      *[!a-zA-Z0-9%+,\-./:=\[\]^_]*) y=${x//\'/\'\\\'\'}; ret="$ret'$y'" ;;
      *) ret="$ret$x" ;;
    esac
    set -- "$@" "$x"
  done
  echo "$ret"
}

verbose() {
  shellquote "$@"
  "$@"
}

#}}}
#{{{ svndirs and $sp, for handling svn source directories

# For doing `find' in svn source dirs: prune the .svn
# subdirectories to avoid spurious matches within the pristine
# source copies.
#
# usage: find <paths> $sp <args>
#
# Also $gp, to do the same with git. git's internal data is less
# plain-text than svn's, so the risk is not so much that there'll be
# false positives when grepping the whole directory; the real problem
# is that .git directories are gigantic and grepping them
# unnecessarily is a big waste of time!
sp='-name .svn -prune -o'
gp='-name .git -prune -o'

# For finding the svn directories in the first place: finds every
# directory below the current one that contains a .svn subdir. Run
# in ~/src, for instance: svn st -q `svndirs`.
svndirs() {
  test $# -eq 0 && set -- .
  \find "$@" -follow -mindepth 1 -type d -exec test -d {}/.svn \; -print -prune
}
gitdirs() {
  test $# -eq 0 && set -- .
  \find "$@" -follow -mindepth 1 -type d -exec test -d {}/.git \; -print -prune
}

# In some repositories I find that gitk --date-order is much more
# readable than the default topological order. There doesn't seem to
# be a 'git config' option to change that default, but I can make one
# up as follows. Just do 'git config gitk.opts --date-order' in such a
# repository.
gitk() {
    command gitk $(git config gitk.opts) "$@"
}

#}}}
#{{{ my Python library code should be available via PYTHONPATH if present
if test -d $HOME/${SRCMISC:-src/misc}/libcode; then
  addpath $HOME/${SRCMISC:-src/misc}/libcode PYTHONPATH
fi
#}}}
#{{{ `pfx' to run text dumping tools over files and prefix the filenames

pfx() {
  # usage: pfx <separator> <command words> <same separator again> <files>
  # will run the command once for each file, and put "<file>:<line>:" on
  # the front of each output line.
  local cmd
  local sep
  local file
  cmd=()
  sep="$1"
  shift
  while test $# -gt 0 -a "x$1" != "x$sep"; do
    cmd[${#cmd[@]}]="$1"
    shift
  done
  shift
  for file in "$@"; do
    "${cmd[@]}" "$file" | perl -pe 'BEGIN{$a=shift@ARGV;}s/^/$a:$.:/' "$file"
  done
}

#}}}
#{{{ grep -n is usually what I want, even if I forget to say it

# When I say 'grep' on a shell command line, I usually meant grep
# -n, and often get annoyed by having to reissue the command with
# -n when I realise I left it off. I considered aliasing grep to
# grep -n, but the trouble with that is that if I'm using grep as
# part of a complicated pipeline, I'm more likely to want the
# standard grep behaviour.
#
# So here's a shell function which adds -n to the grep command line
# but only if it isn't at either end of a pipeline. I make this a
# shell function called by an alias, so that I can quickly restore
# the standard functionality using '\grep', which is quicker to
# type than 'command grep'.
grep-n() {
  if test -t 0 -a -t 1; then
    command grep -n "$@"
  else
    command grep "$@"
  fi
}
alias grep=grep-n
	      
#}}}
#{{{ hacky commands to flail at my command history if I need to

# Like 'history', but does not itself go into the history.
History() {
  command history -d $((HISTCMD-1))
  command history "$@"
}

# Delete some set of history command numbers.
Histdel() {
  local i j c
  c=$((HISTCMD-1))
  for i in `for j in $* $c; do echo $j; done | sort -n -r -u`; do
    command history -d $i
  done
}

#}}}
#{{{ terminal-footling command 'tplay'

tplay() {
  (stty raw isig -echo; cat; stty sane)
}

#}}}
#{{{ reminder system

# This is a bare-bones todo-list system in which I create a file
# ~/.bash_reminders containing one-line reminders with start dates, in
# the form '2013-12-09 10:00 Some reminder text'. The idea is that not
# long after that date+time, the reminder text will begin being
# printed before every shell prompt.
#
# Refresh cannot be guaranteed more often than once per minute.

_bashrc_last_reminder_check=$((SECONDS - 120))
bashrc_refresh_reminders() {
    _bashrc_last_reminder_check=$SECONDS

    # bash 4.2.37 has this 'printf' functionality as a shell builtin,
    # but bash 4.1.5 does not so we fall back to a subprocess.
    local now=$(printf '%(%Y-%m-%d %H:%M)T' -1 2>/dev/null ||
        date "+%Y-%m-%d %H:%M")

    #echo "check begins, now='$now'"
    _bashrc_reminder_text=""
    while read date time text; do
        #echo "check '$now' > '$date $time' [$text]"
        if test "$now" \< "$date $time"; then
            #echo "no, don't enable"
            :
        else
            #echo "yes, enable"
            _bashrc_reminder_text="${_bashrc_reminder_text}${text}"$'\n'
        fi
    done < ~/.bash_reminders
}
bashrc_check_reminders() {
    if test $((SECONDS - _bashrc_last_reminder_check)) -ge 60; then
        bashrc_refresh_reminders
    fi

    echo -n "${_bashrc_reminder_text}"
}

bashrc_add_prompt_fn bashrc_check_reminders

#}}}
#{{{ I like gitk to spawn completely in the background

bashrc_background_gitk() {
    (command gitk "$@" &)
}
alias gitk=bashrc_background_gitk

#}}}
