#!/bin/bash

# Script to wrapper cal(1) and give it more sensible command-line
# parsing.

REALCAL=/usr/bin/cal
OPTS="-3 -m"

month=`date +%m`
month=$[1$month - 100]  # trim leading zero, avoiding octal trap
year=`date +%Y`

# Possible invocations:
#
# Every invocation which prints a single month also prints the two
# either side.
#
#  - just `cal': prints the current month.
#  - `cal <n>' where n <= 12: prints the nearest month with that
#    number (erring on the side of the future if it's 6 months away
#    from the current one).
#  - `cal <n> <m>': prints month n in year m as usual.
#
#  - `cal <n>' where n > 12: prints the entire calendar for that
#    year, as usual.

doingopts=true
while $doingopts; do
  case "$1" in
    -m | -s | -1 | -3 | -j | -y ) OPTS="$OPTS $1"; shift;;
    *) doingopts=false;;
  esac
done

if test "$#" = 2; then
  month=$1
  year=$2
elif test "$#" -gt 2; then
  exec $REALCAL $OPTS "$1"
elif test "$#" = 1 && test "$1" -gt 12; then
  exec $REALCAL $OPTS "$1"
elif test "$#" = 1; then
  if test "$1" -gt $[$month + 6]; then
    year=$[$year - 1]
  elif test "$month" -ge $[$1 + 6]; then
    year=$[$year + 1]
  fi
  month=$1
fi
exec $REALCAL $OPTS "$month" "$year"
