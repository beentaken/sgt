#!/usr/bin/env perl

@floats = (
  2.0,    # 40000000
  3.0,    # 40400000
  3.00390625, # 40404000
);

@doubles = (
  2.0,   # 4000000000000000
  32.0,  # 4040000000000000
  32.5,  # 4040400000000000
  32.501953125, # 4040404000000000 
  32.501953125 + 1/131072.0, # 4040404040000000
  32.501953125 + 1/131072.0 + 1/33554432.0, # 4040404040400000
  32.501953125 + 1/131072.0 + 1/33554432.0 + 1/8589934592.0, # 4040404040404000
);

@dblorder = &order("d", 8, \@doubles);
@fltorder = &order("f", 4, \@floats);

if (scalar @ARGV == 0) {
  print "usage: float [-f | -h] [-s | -d] <number>...\n";
  print "       -f    treat input numbers as decimal floating-point\n";
  print "       -h    treat input numbers as hex strings\n";
  print "       -s    work in single precision\n";
  print "       -d    work in double precision\n";
  print "\n";
  print "Byte orders for this platform (shown with 0 representing LSB):\n";
  @order = ();
  for ($i = 0; $i < 4; $i++) { $order[$fltorder[$i]] = $i; }
  print "  single precision: ", (join "", @order), "\n";
  for ($i = 0; $i < 8; $i++) { $order[$dblorder[$i]] = $i; }
  print "  double precision: ", (join "", @order), "\n";
}

$size = $mode = "x";

foreach $arg (@ARGV) {
  if ($arg =~ /^-([^0-9])(.*)/) {
    while ($arg =~ /^-(.)(.*)/) {
      $arg = "-$2";
      if ($1 eq "h") { $mode = "h"; next; }
      if ($1 eq "f") { $mode = "f"; next; }
      if ($1 eq "s") { $size = "s"; next; }
      if ($1 eq "d") { $size = "d"; next; }
    }
  } else {
    if ($size eq "x" || $mode eq "x") {
      print STDERR "$arg: please specify size (-s or -d) and mode (-h or -f)\n";
      next;
    }
    if ($size eq "s") {
      $n = 4; $order = \@fltorder; $pack = "f";
    } else {
      $n = 8; $order = \@dblorder; $pack = "d";
    }
    if ($mode eq "h") {
      $arg =~ s/^0x//i;
      $arg =~ y/0-9a-zA-Z//cd;
      @array = (unpack "C*", pack "H*", $arg), 0,0,0,0,0,0,0,0;
      @data = ();
      for ($i = 0; $i < $n; $i++) {
        $data[$order->[$i]] = $array[$n-1-$i];
      }
      $number = pack "C*", @data;
      &display($pack, $n, $number, $order);
    } else {
      if ($arg =~ /0x/) {
          # Hex floats might tickle Debian bug #172562 (in glibc).
          # To work around this, I append a large number of zeroes
          # and a one to the mantissa. Horrid, and in particular
          # this relies on round-to-nearest, but it works for now.
          if ($arg =~ /\./) {
              $arg =~ s/p/000000000000000000001p/;
          } else {
              $arg =~ s/p/.000000000000000000001p/;
          }
      }
      $number = pack $pack, $arg;
      &display($pack, $n, $number, $order);
    }
  }
}

sub order {
  my ($pack, $n, $array) = @_;
  @order = ();
  %bytes = ();
  $total = $n*($n-1)/2;
  for ($i = 0; $i < $n-1; $i++) {
    @str = unpack "C*", pack $pack, $array->[$i];
    $results = 0;
    for ($j = 0; $j < $n; $j++) {
      if ($str[$j] != 0 && !$bytes{$j}) {
        $bpos = $j;
        $results++;
      }
    }
    die (sprintf "%d %g %s\n", $i, $array->[$i], join ",", @str) .
	"results = $results not 1!\n" unless $results == 1;
    $bytes{$bpos} = 1;
    push @order, $bpos;
    $total -= $bpos;
  }
  push @order, $total;
  reverse @order;
}

sub display {
  my ($pack, $n, $data, $order) = @_;
  $flt = unpack $pack, $data;
  @d1 = unpack "C*", $data;
  @d2 = ();
  foreach $i (@$order) { unshift @d2, $d1[$i]; }
  $hex = unpack "H*", pack "C*", @d2;
  printf "%-16s %.19g\n", $hex, $flt;
}
