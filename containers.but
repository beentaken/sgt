\C{containers} Container Structures

This chapter gives data structures which store collections of
\e{elements}, and provide ways to retrieve elements from the
collection.

Some of these structures allow you to retrieve elements by a numeric
index; some allow you to retrieve them by looking up a key. Some
store them in sorted order, so you can retrieve them in that order
very easily. Some allow easy insertion and deletion; some don't. All
of them have different advantages and disadvantages.

\H{binarytree} Binary Trees

\# FIXME

\# Addition's easy.

\# Deletion of a leaf is trivial. Deletion of a node with one child
\# is still pretty easy - just replace the node with its only child.
\# Deletion of a node with _two_ children is slightly less trivial:
\# search down the tree to find the successor to that node, and move
\# the element from there into the original node. The successor will
\# have at most one child (prove it!) and therefore can be deleted
\# more easily.

\H{btree} B-Trees

A B-tree is a balanced tree structure. It stores elements in sorted
order (usually; see \k{btree-counted}). It provides the following
efficient operations:

\b Insert a new element in the tree, in \cw{O(log N)} time.

\b Delete an element from the tree, in \cw{O(log N)} time.

\b Look up an element given its key, in \cw{O(log N)} time.

\b Join two trees into one larger tree, in \cw{O(log N)} time. (Note
that this will not merge two sorted lists; it only applies when the
whole of one tree needs to be placed before anything in the other.)

\b Split the tree into two smaller trees, in \cw{O(log N)} time.

The nodes in a B-tree are not binary nodes; they can vary in size.
In general, the number of children linked from a given node can be
anything from \cw{t} to \cw{2t}, for some value of \cw{t}. Each pair
of children is separated by an element.

(There is one exception: the root node in the tree is allowed to be
smaller than \cw{t}. \K{btree-add} explains why.)

In the example diagrams given in this description, we will use
\cw{t=2}, so that each node can have two children separated by an
element, three children separated by two elements, or four children
separated by three elements. These are also known as \e{2-3-4
trees}, and they are the simplest form of B-tree.

Here is a sample B-tree containing the letters of the alphabet:

\c                                       +-----------+
\c                                       | . J . V . |
\c                                       +-|---|---|-+
\c                                         |   |   |
\c             +---------------------------+   |   +-----------+
\c             |                               |               |
\c             v                               v               v
\c       +-----------+                 +---------------+   +-------+
\c       | . C . F . |                 | . N . R . T . |   | . X . |
\c       +-|---|---|-+                 +-|---|---|---|-+   +-|---|-+
\c         |   |   |                     |   |   |   |       |   |
\c    +----+  ++   +---+         +-------+ +-+   +-+ +---+   +-+ +----+
\c    |       |        |         |         |       |     |     |      |
\c    v       v        v         v         v       v     v     v      v
\c +-----+ +-----+ +-------+ +-------+ +-------+ +---+ +---+ +---+ +-----+
\c | A B | | D E | | G H I | | K L M | | O P Q | | S | | U | | W | | Y Z |
\c +-----+ +-----+ +-------+ +-------+ +-------+ +---+ +---+ +---+ +-----+

In this tree you can see all the possible sizes of node. The X node
has two children separated by one element; the CF and JV nodes have
three children and two elements; the NRT node has four children and
three elements. The leaf nodes, on the bottom level, come in the
same sizes (one, two or three elements) but have no children.

A B-tree always has the same height everywhere. That is, every path
from the root to a leaf contains the same number of nodes. Nodes are
never added \e{below} other nodes, like in a binary tree (see
\k{binarytree}); instead, new nodes are created by splitting big
nodes in half, or by adding a new level to the tree at the \e{root}.

\S{btree-add} Adding an element to a B-tree

To add an element to a B-tree, you first need to search down the
tree to find where to put the element. This always means you will
end up looking at one of the null child pointers in a leaf node. For
example, if you wanted to add \cw{"Mc"} to the tree above, you would
follow the middle link from the root node (\cw{J < Mc < R}), follow
the left link from the next node (\cw{Mc < N}), try to follow the
rightmost link from the KLM mode (\cw{M < Mc}), discover it was
null, and stop.

So you know you want to add the new element either on one end of a
leaf node, or between two elements in a leaf node. Either way, this
involves making the leaf node bigger by one element.

If the leaf node is smaller than maximum size, you can just make it
bigger by one, and that's all that needs doing. So terminate.

If the leaf node is already as big as it can be, you need to split
it into two. You do this by taking one of the elements out of the
middle of the node, and splitting the node in two at that element.
So instead of having a single large node, you have two smaller nodes
with one element between them. For example:

\c +----------+        +---+       +------+
\c | K L M Mc |   ->   | K | + L + | M Mc |
\c +----------+        +---+       +------+

(If the node doesn't split exactly in half, as in this case, it
doesn't matter which of the two middle elements you choose.)

Next you need to look at the \e{parent} node of the one you have
just split. There will be a single pointer leading to the old node.
You need to replace this with two pointers to your new half-nodes.
Any two pointers must have an element between them; this is why we
have taken one element out when splitting the large node.

For example, when inserting \cw{"Mc"}, the effect on the N node
would look like this:

\c   +---------------+        +-------------------+
\c   | . N . R . T . |        | . L . N . R . T . |
\c   +-|---|---|---|-+        +-|---|---|---|---|-+
\c     |   |   |   |            |   |   |   |   |
\c     |  etc etc etc   ->    +-+   ++ etc etc etc
\c     |                      |      |
\c     v                      v      v
\c +----------+             +---+ +------+
\c | K L M Mc |             | K | | M Mc |
\c +----------+             +---+ +------+

So the original over-full node has been split and the node above it
has grown by one.

If the next node up has not become over-full, the algorithm can now
terminate. Otherwise, that node must be split in the same way again:

\c +-------------------+      +-------+       +-----------+
\c | . L . N . R . T . |      | . L . | + N + | . R . T . |
\c +-|---|---|---|---|-+  ->  +-|---|-+       +-|---|---|-+
\c   |   |   |   |   |          |   |           |   |   |
\c  etc etc etc etc etc        etc etc         etc etc etc

Then you look at the parent node of \e{that} node and insert the new
pointers there, and so on.

Eventually you will either find a node that is not full, so you can
easily make it bigger by one and terminate the algorithm, or you
will find you have split the root of the tree into two. If that
happens, you create a new root node with pointers to the two halves
of the previous root, like this:

\c                                          +-------+
\c                                          | . H . |
\c                                          +-|---|-+
\c                                            |   |
\c +-------+       +-----------+          +---+   +---+
\c | . F . | + H + | . Q . S . |  ->      |           |
\c +-|---|-+       +-|---|---|-+          v           v
\c   |   |           |   |   |        +-------+ +-----------+
\c  etc etc         etc etc etc       | . F . | | . Q . S . |
\c                                    +-|---|-+ +-|---|---|-+
\c                                      |   |     |   |   |
\c                                     etc etc   etc etc etc

(Note that this new node will have only two children. This is
allowed in a 2-3-4 tree, but in B-trees with larger nodes, it's
below the minimum size. This is why the root is allowed to be
smaller than any other node.)

\S{btree-del} Deleting an element from a B-tree

Deleting an element is slightly more fiddly, but the basic idea is
quite simple: you search down the tree until you hit a leaf node,
and then you delete your element from the leaf node, which reduces
its size by one.

There are two things that can go wrong with this. One is that you
might find the element \cw{E} you want to delete in an \e{internal}
node, not in a leaf node. If this happens, you search down one of
the neighbouring subtrees until you find \cw{E}'s successor or
predecessor \cw{F} (which is guaranteed to be in a leaf). Then you
put \cw{F} in the internal node in place of \cw{E}, continue down to
the leaf containing the original copy of \cw{F}, and delete that
instead.

The other thing that can go wrong is if the leaf node you eventually
reach is already as small as it can get. The solution is to avoid
being in that situation: as you search down the tree to find the
element to delete, you \e{avoid} going through any minimum-size
node, by making the node bigger as you go past.

You can do this by moving one child over from a neighbouring node:

\c   +-----------+                  +-----------+
\c   | . A . E . |                  | . A . D . |
\c   +-|---|---|-+                  +-|---|---|-+
\c     |   |   |                      |   |   |
\c    etc  |   +---------+           etc  |   +---------+
\c         |             |      ->        |             |
\c         v             v                v             v
\c +---------------+ +-------+      +-----------+ +-----------+
\c | . B . C . D . | | . F . |      | . B . C . | | . E . F . |
\c +-|---|---|---|-+ +-|---|-+      +-|---|---|-+ +-|---|---|-+
\c   |   |   |   |     |   |          |   |   |     |   |   |
\c  etc etc etc etc   etc etc        etc etc etc   etc etc etc

Here, the rightmost child of the BCD node has been moved over to the
F node. There needs to be an element to separate it from the
leftmost child of the F node, and the only element which can go
there is the E from the AE node. The D from the BCD node is then
left without a home, so we move that up to take the place of the E.
Hence, if our search through the tree took us down into the F node,
we could do this adjustment to ensure the node was more than minimum
size before descending into it.

You can only move a child over from a neighbour node if you \e{have}
a neighbour node of more than minimum size. If neither of the node's
neighbours is suitable, what you do instead is to \e{merge} the node
with one of its neighbours:

\c         +-----------+                       +-------+
\c         | . B . D . |                       | . D . |
\c         +-|---|---|-+                       +-|---|-+
\c           |   |   |                           |   |
\c     +-----+   |   +-----+                +----+   +----+
\c     |         |         |      ->        |             |
\c     v         v         v                v             v
\c +-------+ +-------+ +-------+      +---------------+ +-------+
\c | . A . | | . C . | | . E . |      | . A . B . C . | | . E . |
\c +-|---|-+ +-|---|-+ +-|---|-+      +-|---|---|---|-+ +-|---|-+
\c   |   |     |   |     |   |          |   |   |   |     |   |
\c  etc etc   etc etc   etc etc        etc etc etc etc   etc etc

Here, the A node and the C node have been merged into one big node.
The rightmost child of the A node and the leftmost child of the C
node need an element to separate them, and fortunately when the
pointers in the BD node are merged, the B is left without a home, so
we move the B down to go between the two small nodes.

This node-merging operation can also destroy the root of the tree.
This happens if the root has only two children, and both of those
are of minimum size. In this case, the above merging operation would
reduce the root to only one child and no elements - so it might as
well not be there. Like this:

\c      +-------+
\c      | . B . |
\c      +-|---|-+
\c        |   |
\c     +--+   +--+          +---------------+
\c     |         |      ->  | . A . B . C . |
\c     v         v          +-|---|---|---|-+
\c +-------+ +-------+        |   |   |   |  
\c | . A . | | . C . |       etc etc etc etc 
\c +-|---|-+ +-|---|-+
\c   |   |     |   |
\c  etc etc   etc etc

In summary, then, the complete B-tree deletion algorithm is:

\n{btree-del-searchstep} Search down the tree for the target
element. Avoid ever descending into a minimum-size node. In order to
avoid this, we make any minimum-size nodes larger, either by moving
a child over from a neighbouring node, or if both neighbour nodes
are of minimum size themselves, merging the node with one of its
neighbours. (Note that merging might destroy the root of the tree.)

\n If we find the target element in an internal node, we search down
to find its predecessor or its successor (it doesn't matter which).
We put this in place of the target element, and continue our descent
towards the leaf node we originally found it in.

\n Eventually we reach a leaf node containing an element we want to
delete. (Either it's the original element we were after, or it's the
original copy of another element we have copied over our original
target.) We have already arranged for this leaf node to be larger
than minimum size, so we can just delete one element from it and
finish.

\S{btree-join} Joining two B-trees together

You can join two B-trees together in \cw{O(log N)} time, in such a
way that everything in the first tree ends up \e{before} anything in
the second tree. This is of limited use in B-trees sorted by key,
but potentially much more useful in unsorted B-trees (see
\k{btree-counted}).

The joining algorithm requires a spare element to use as a separator
between the two trees. So if we are joining two trees, the first
thing we need to do is to delete the last element from the first
tree, or the first element from the second tree.

Once we have two trees and a separating element, we measure the
\e{height} of each tree. If the two trees have the same height, the
method is very easy: we create a new root node, containing one
element (the separator element) and two child pointers (pointing to
the roots of the two input trees). The algorithm can immediately
terminate.

Otherwise, one tree must be shorter than the other. In this case,
the root of the smaller tree will become an internal node in the
larger one. We search down the larger tree to find the node that
will become the neighbour to the smaller tree's root. For example,
if the left tree is two nodes higher than the right tree, we will
find the rightmost node two levels down from the root of the left
(larger) tree.

Once we have found this node, we also find the pointer to it in its
parent. We want to replace this pointer with two pointers separated
by our separator element, like this:

\c +-----------+                        +---------------+
\c | . P . Q . |                        | . P . Q . S . |
\c +-|---|---|-+                        +-|---|---|---|-+
\c   |   |   |                            |   |   |   |
\c  etc etc  |                      ->   etc etc  |   +-----+
\c           |                                    |         |
\c           v                                    v         v
\c       +-------+       +-------+            +-------+ +-------+
\c       | . R . | + S + | . T . |            | . R . | | . T . |
\c       +-|---|-+       +-|---|-+            +-|---|-+ +-|---|-+
\c         |   |           |   |                |   |     |   |
\c        etc etc         etc etc              etc etc   etc etc

Here, S is our separator element, and the T node is the root of the
shorter tree. The R node is the rightmost node in the larger tree
that has the same number of levels below it as T. So in the R node's
parent, PQ, we replace the pointer to the R node with both pointers
to R and T nodes, separated by the S node.

Of course, doing this might have caused the PQ node to overflow. In
this case, we must split the PQ node and do the same operation to
the next node up, just like in addition (see \k{btree-add}). And,
just like in addition, if the node splitting continues all the way
up to the root of the larger tree, a new root might have to be
created.

\S{btree-split} Splitting a B-tree in two

You can split a B-tree in two at an arbitrary point, so that you end
up with two smaller B-trees, one containing everything before the
split point, and one containing everything after it.

To begin splitting a B-tree, we must first search down the tree to
find the split point. The tree is split \e{between} two elements, so
(just like addition) the split point we find is bound to be one of
the null child pointers in a leaf node.

We want to split the leaf node in two at that pointer position,
inserting a null element pointer on the right of the left half and
on the left of the right half. This will give us two nodes to
replace one, so we then look at the next node up. We then want to
split \e{that} in two at the pointer leading down to the node we
have split, and put one of our node pointers at each of the new
ends. Like this:

\c +---------------+        +-----------+      +-------+
\c | . A . B . H . |        | . A . B . |      | . H . |
\c +-|---|---|---|-+        +-|---|---|-+      +-|---|-+
\c   |   |   |   |            |   |   |          |   |
\c  etc etc  |  etc          etc etc  |          |  etc
\c           |                        |          |
\c           v                        v          v
\c         +-----------+            +---+  +-----------+
\c         | . F . G . |  ->        | . |  | . F . G . |
\c         +-|---|---|-+            +-|-+  +-|---|---|-+
\c           |   |   |                |      |   |   |
\c           |  etc etc               |      |  etc etc
\c           |                        |      |
\c           v                        v      v
\c      +---------+                 +---+ +-----+
\c      | C x D E |                 | C | | D E |
\c      +---------+                 +---+ +-----+

This shows three levels of the tree being split. The CDE node is
split apart at the split point (marked by the \cw{x}). The FG node
is split apart at the pointer to the CDE node, and on each side of
the gap goes a pointer to one half of the old CDE node. Then the ABH
node is split at the pointer to the FG node, and on each side of the
gap goes a pointer to one half of the old FG node. We continue this
splitting all the way up to the root of the tree until we have split
the root itself in two, and then we have two completely separate
trees.

(As an optimisation, we could have done the splitting as we searched
\e{down} the tree, instead of going right to the bottom and coming
back up. The only trouble with that is that if your B-tree is
counted - \k{btree-counted} - then maintaining the counts is a bit
difficult that way.)

Unfortunately, we haven't finished yet. In the process of splitting
each node, we have probably left some undersize nodes behind. In the
example above, the FG node was split to the left of the F, so the
right-hand node had two elements and three children but the
left-hand node had no elements and only one child. In a 2-3-4 tree,
this is unacceptable. In higher-order B-trees, a node with only one
element in it, or only two, might be just as bad.

We know all the undersize nodes must be at the edges of the two
output trees: on the right edge of the left tree, and the left edge
of the right tree. So we need to make one pass down each of the
trees to sort out undersize nodes.

In order to deal with undersize nodes, we use the same tricks as in
the deletion algorithm (\k{btree-del}): we move subtrees over from
the neighbouring node, or we merge the node with its neighbour. One
of these is guaranteed to be possible: if the neighbour is so large
that you can't merge your node with it, then it must be large enough
that it has enough spare subtrees to make the undersized node
acceptably big.

Note that we always want to make the edge node at least one \e{more}
than the minimum allowed size, because we might need to use one
element from it to merge nodes at the next level. So as well as
dealing with undersize nodes, we also need to be careful of any
minimum-size nodes we encounter.

The only other interesting case is if there is a zero-element node
at the \e{root} of either of the output trees. In this case, we
throw it out completely, because it contains no elements and only
one pointer to a child - so we can replace it with its child. (Note
that in higher-order B-trees, where you can have an undersize node
that is not a zero-element node, we tolerate undersize nodes in the
root of the tree but we do not tolerate zero-element nodes
anywhere.)

So in summary, the B-tree splitting algorithm is:

\b Search down the tree to find the split point, which will be a
null child pointer in a leaf.

\b Split the leaf node at that child pointer, inserting two null
child pointers on the two sides of the split in place of the one
we removed.

\b Now split the node's parent, inserting the pointers to the two
halves of the first node in place of the original pointer to the
whole first node. Continue back up to the root, so that the tree
comes apart into two pieces.

\b Make a pass down the right edge of the left tree looking for
undersize or minimum-size nodes. Every time we find one, we make it
bigger, by moving subtrees from its neighbour or by merging it with
its neighbour. One of these is always possible. We aim to make each
node \e{greater} than minimum size in case we need one of its
elements for a merge on the next level down. If we find a
zero-element node at the root of the tree, we throw it away and let
its child node become the new root. Other undersized nodes at the
root are tolerated (but beware that if the root has only one
element, then a merge at the next level will destroy it).

\b Make a pass down the left edge of the right tree doing the same
thing.

\S{btree-counted} Counted B-trees

One useful enhancement you can make to a B-tree is to store element
counts in it. The idea is that you should always be able to tell how
many elements are in a subtree, by looking at the counter stored
next to the subtree pointer.

For example, storing counts in the example tree from \k{btree} would
make it look like this:

\c                                      +------------+
\c                                      | 9 J 11 V 4 |
\c                                      +-|----|---|-+
\c                                        |    |   |
\c             +--------------------------+    |   +-----------+
\c             |                               |               |
\c             v                               v               v
\c       +-----------+                 +---------------+   +-------+
\c       | 2 C 2 F 3 |                 | 3 N 3 R 1 T 1 |   | 1 X 2 |
\c       +-|---|---|-+                 +-|---|---|---|-+   +-|---|-+
\c         |   |   |                     |   |   |   |       |   |
\c    +----+  ++   +---+         +-------+ +-+   +-+ +---+   +-+ +----+
\c    |       |        |         |         |       |     |     |      |
\c    v       v        v         v         v       v     v     v      v
\c +-----+ +-----+ +-------+ +-------+ +-------+ +---+ +---+ +---+ +-----+
\c | A B | | D E | | G H I | | K L M | | O P Q | | S | | U | | W | | Y Z |
\c +-----+ +-----+ +-------+ +-------+ +-------+ +---+ +---+ +---+ +-----+

You have to maintain the correctness of those counts whenever you
modify the tree. This isn't difficult. For example, when you split a
node, you need to work out counts for the new smaller nodes, and
when you move a child over from one node to another you have to
adjust the counts for the source and target nodes.

Instead of storing the count for a subtree next to the pointer to
the subtree's root, you can store the count \e{in} the subtree's
root. This makes the nodes smaller (one count per node, instead of
up to \cw{2t}) but it means you have to access more nodes in order
to find things.

The purpose of this is to enable you to look up an element by its
numeric index. If you want the fifth smallest element in the tree,
or the 18th largest, or the median, all of these are easy to find
just by checking the numbers as you search down. For example,
suppose we want the twelfth element.

\b Looking at the JV node: elements 1-9 are on the left of J. J
itself is number 10. Elements 11-21 are between J and V. So we
descend between J and V to the NRT node, and remember that it covers
elements 11-21.

\b Looking at the NRT node: elements 11-13 are on the left of N, N
is number 14, and so on. So we descend to the left of N.

\b Looking at the KLM node: we know it covers elements 11-13, and so
K must be 11, L must be 12, and M must be 13. Return L.

The ability to quickly retrieve medians and percentiles (\e{order
statistics}; see [FIXME]) from a constantly changing data set is one
thing a counted B-tree lets you do.

A much more useful thing, though, is that if your B-tree is counted,
it doesn't have to be sorted. It's reasonably easy to alter the
addition and deletion algorithms so that instead of searching the
tree by comparing keys, they search the tree by checking element
counts. Then you end up with a structure in which:

\b You can retrieve the element at position \cw{i} in \cw{O(log N)}
time.

\b You can insert a new element at position \cw{i} in \cw{O(log N)}
time.

\b You can delete the element at position \cw{i} in \cw{O(log N)}
time.

\b You can concatenate two collections together in \cw{O(log N)}
time.

\b You can split your collection into two at position \cw{i} in
\cw{O(log N)} time.

\b Therefore, you can remove a chunk from the middle (by splitting
the tree in three and joining the outer two back together) or insert
a chunk in the middle (by splitting the tree at the insertion point
and joining the three fragments back into one) in \cw{O(log N)} time.

This structure has the advantages of an unsorted array (fast numeric
lookups) and \e{also} the advantages of a linked list (fast
insertion, deletion, and linking and unlinking of large
subsections). It's ideal for editors, which need to index the lines
of the file being edited in a way that lets them jump quickly to a
numbered line, and also insert and delete lines easily.

For specialist purposes, you might want to store a different type of
count in the nodes: if the elements themselves have sizes of some
sort, you might want to store the \e{total size} of everything below
a child.
